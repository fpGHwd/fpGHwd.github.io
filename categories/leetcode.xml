<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dichotomy (Posts about leetcode)</title><link>https://fpghwd.github.io/</link><description></description><atom:link href="https://fpghwd.github.io/categories/leetcode.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;suzumiya natsuhi&lt;/a&gt; </copyright><lastBuildDate>Fri, 21 Aug 2020 03:14:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Leetcode405 Convert a Number to Hexadecimal</title><link>https://fpghwd.github.io/posts/bu-ma/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
这道题要将有符号数转化为 16 进制表示法. 有号整数在计算机内是补码表, 所以将数字的补码转化为 16 进制即可.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;原码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
在指定数字范围和位数上限后, 原码最高位为符号, 其他位为数字的绝对值二进制表示. 例如: 5 为 00000000, -4 为 10000100
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;反码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
反码: 原码的进一步表示. 但是对于 0 有两种表示方法(假设位数上限为 8 位, 00000000 和 10000000), 且对于负数的运算并不直观: 例如(-5)+1=-4, 10000101+1=10000100 在位运算上不直观(此处的直观是指计算机的位运算)
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;补码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
补码: 补码的操作看起来复杂(反码除符号位取反,然后加 1), 但是最终的目的还是解决掉反码表示的两个问题(0 的两个表示和负数的运算直观性). 其实我觉得换我来设计也是一样的.
&lt;/p&gt;

&lt;p&gt;
8 位能表示 2&lt;sup&gt;8&lt;/sup&gt; 个数, 如果对于无符号(正数)可以表示从 0~255 这 256 个数(可能是 0~255, 也可以是 2~257, 3~258 等等), 而对于有符号整数, 同样可以表示 256 个. 假设我们从 0~255 中把 128~255 这 128 个数的位置腾出来给负数, 那可以表示-128~-1 这 128 个数. 整体情况就是用了 8 位表示-128~127 这 256 个数. 之前的两个问题已经解决了一个, 那就是 0 的重合问题, 现在要解决的就是运算的直观性. 其实一眼就看出来了: 在表示的 128~255 中本来就有运算直观性, 现在要做的就是把 -128~-1 放到 100000000~11111111 这 128 个位置中而已. 然后刚好 11111111 代表-1, 11111111(-1)+1=00000000(0), 刚好合适. 其实这里写了很多, 不如公式里面写的更为清楚. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;8 位求补码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
把原码(128/10000000~255/11111111)映射为(-128/10000000~-1/11111111), 其实就是数字-256: 128 + (-256) = -128, 255 + (-256) = -1, 因为 128 和 255 的原码我们很容易得到,而后面负数就是原来我们需要转换的负数.
所以对于负数而言, 求原码的稍微转换一下: 原码数 + (-256) = 原数.
&lt;/p&gt;

&lt;p&gt;
那么我们来求一个-24 的原码: -2(原数) + 256 = 254(原码数), 254 是 11111110, 所以-2 的补码就是 11111110
我觉得中间反码的概念对于设计过程理解而言可能有用, 但是对于转码就直接用公式就可以了: 当原数为正,补码就是原码; 当原数为负, 补码就是原数+256 后的原码.(这里以 8 位为例子, int 就是 32 位)  
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-cpp"&gt;class Solution {
public:
    string toHex(int num) {
        string ret = "";
        unsigned int n;
        if(num &amp;lt; 0)n =  ~(abs(num))+1;
        else if(num == 0)return "0";
        else n = num;

        while(n){
            ret.insert(0,1,(n%16 &amp;gt;= 10)?(n%16 - 10 + 'a'):(n%16 + '0'));
            n /= 16;
        }

        return ret;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
其中 &lt;code&gt;n = ~(abs(num)) + 1&lt;/code&gt; 就是求反码的过程. 之前最高位 8 位时已经得到反码公式: &lt;code&gt;原数 + 2^8  = 反码数&lt;/code&gt; 可以直接转化为反码. 那么在考虑到类型转换的原因, 不能让运算过程中发生隐性的类型转换(256 不能用八位表示, 且不能用 long 或者其他高位数来参与运算), 那么原来的过程可以转化为 &lt;code&gt;原数 + 255 + 1 = 反码数&lt;/code&gt;, 同时考虑到原数是负数, 进一步转化为 &lt;code&gt;255 - (-原数) + 1 = 反码数&lt;/code&gt;, 现在把 &lt;code&gt;255 - (-原数)&lt;/code&gt; 单独拿出来就是 &lt;code&gt;255 - abs(原数)&lt;/code&gt;, 用求反符号代替 &lt;code&gt;255 -&lt;/code&gt; , 原式最终转化为 &lt;code&gt;反码数 = ~(abs(原数)) + 1&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
同样在 int 为 32 位的情况中, 求反码的公式为: &lt;code&gt;反码数 = ~abs(原数) + 1&lt;/code&gt; .
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/bu-ma/</guid><pubDate>Mon, 22 Jun 2020 01:14:03 GMT</pubDate></item></channel></rss>