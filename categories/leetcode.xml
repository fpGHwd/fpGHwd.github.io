<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dichotomy (Posts about leetcode)</title><link>https://fpghwd.github.io/</link><description></description><atom:link href="https://fpghwd.github.io/categories/leetcode.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;suzumiya natsuhi&lt;/a&gt; </copyright><lastBuildDate>Fri, 25 Sep 2020 08:15:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Leetcode668. Employee Importance</title><link>https://fpghwd.github.io/posts/leetcode668-employee-importance/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/employee-importance/"&gt;690. Employee Importance&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/*
// Definition for Employee.
class Employee {
public:
    int id;
    int importance;
    vector&amp;lt;int&amp;gt; subordinates;
};
*/

class Solution {
  public:
    int getImportance(vector&amp;lt;Employee *&amp;gt; employees, int id) {

        unordered_map&amp;lt;int, Employee *&amp;gt; umii;
        for (Employee *e : employees) {
            umii[e-&amp;gt;id] = e;
        }

        int importance = 0;
        queue&amp;lt;int&amp;gt; qi;
        qi.push(id);

        int tmp;
        while (!qi.empty()) {
            tmp = qi.front();
            importance += umii[tmp]-&amp;gt;importance;
            qi.pop();
            for (int i : umii[tmp]-&amp;gt;subordinates)
                qi.push(i);
        }

        return importance;
    }
};


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (108/108)

Runtime: 36 ms, faster than 92.63% of C++ submissions.

Memory Usage: 14.4 MB, less than 27.87% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode668-employee-importance/</guid><pubDate>Fri, 25 Sep 2020 00:15:02 GMT</pubDate></item><item><title>Leetcode649  Second Minimum Node In a Binary Tree</title><link>https://fpghwd.github.io/posts/leetcode649-second-minimum-node-in-a-binary-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/"&gt;671. Second Minimum Node In a Binary Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    int fm = -1, sm = -1;
    int findSecondMinimumValue(TreeNode *root) {
        if (root == NULL)
            return sm;

        if (fm == -1)
            fm = root-&amp;gt;val;
        else {
            if (sm == -1) {
                if (root-&amp;gt;val &amp;gt; fm)
                    sm = root-&amp;gt;val;
                else if (root-&amp;gt;val &amp;lt; fm) {
                    sm = fm;
                    fm = root-&amp;gt;val;
                } else {
                    // do nothing
                }
            } else {
                if (root-&amp;gt;val &amp;gt; sm) {
                    // do noting
                } else if (root-&amp;gt;val &amp;lt; fm) {
                    sm = fm;
                    fm = root-&amp;gt;val;
                } else if (root-&amp;gt;val == sm || root-&amp;gt;val == fm) {
                    // do nothing
                } else { // root-&amp;gt;val &amp;gt; fm and root-&amp;gt;val &amp;lt; sm;
                    sm = root-&amp;gt;val;
                }
            }
        }

        findSecondMinimumValue(root-&amp;gt;left);
        findSecondMinimumValue(root-&amp;gt;right);

        return sm;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (35/35)

Runtime: 0 ms, faster than 100.00% of C++ submissions.

Memory Usage: 7.2 MB, less than 17.00% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
自从学会了一种偷懒的写法之后，就一直用这种 travel 的方法。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode649-second-minimum-node-in-a-binary-tree/</guid><pubDate>Thu, 24 Sep 2020 23:44:24 GMT</pubDate></item><item><title>Leetcode804 Most Common Word</title><link>https://fpghwd.github.io/posts/leetcode804-most-common-word/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/most-common-word/"&gt;819. Most Common Word&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    string mostCommonWord(string paragraph, vector&amp;lt;string&amp;gt; &amp;amp;banned) {
        unordered_map&amp;lt;string, int&amp;gt; umsi;
        int start, end;
        transform(paragraph.begin(),paragraph.end(),paragraph.begin(),::tolower);
        for (int i = 0; i &amp;lt; paragraph.length(); i++) {
            while (i &amp;lt; paragraph.length() &amp;amp;&amp;amp; !isalpha(paragraph[i]))
                i++;
            start = i;
            while (i &amp;lt; paragraph.length() &amp;amp;&amp;amp; isalpha(paragraph[i]))
                i++;
            end = i;
            umsi[paragraph.substr(start, end - start)]++;
        }

        for (string s : banned)
            if (umsi.find(s) != umsi.end())
                umsi.erase(s);

        string w = "";
        for (auto it : umsi) {
            if (w == "")
                w = it.first;
            else if (umsi[it.first] &amp;gt; umsi[w])
                w = it.first;
        }

        return w;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (47/47)

Runtime: 4 ms, faster than 99.63% of C++ submissions.

Memory Usage: 7.8 MB, less than 87.14% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode804-most-common-word/</guid><pubDate>Thu, 24 Sep 2020 22:56:27 GMT</pubDate></item><item><title>调试的时候出了一个问题</title><link>https://fpghwd.github.io/posts/diao-shi-de-shi-hou-chu-le-yi-ge-wen-ti/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/shortest-distance-to-a-character/"&gt;821. Shortest Distance to a Character&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
一个 gdb 调试的问题，没太看明白（暴哭）：
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200925_132117screenshot.png" alt="_20200925_132117screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
想到可能是类型的问题： &lt;code&gt;size_type&lt;/code&gt; 是一个无符号的整数， &lt;code&gt;int&lt;/code&gt; 是有符号整数，有符号整数首先转换成无符号整数。 &lt;code&gt;-1&lt;/code&gt; 转化成 &lt;code&gt;0xffffffff&lt;/code&gt; ，所以应该是没有问题的。
&lt;/p&gt;

&lt;p&gt;
同时有一个问题：转化时为什么是有符号整数转换成无符号整数，而不是相反呢？
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>leetcode</category><guid>https://fpghwd.github.io/posts/diao-shi-de-shi-hou-chu-le-yi-ge-wen-ti/</guid><pubDate>Thu, 24 Sep 2020 21:22:42 GMT</pubDate></item><item><title>Leetcode107 Binary Tree Level Order Traversal II</title><link>https://fpghwd.github.io/posts/leetcode107-binary-tree-level-order-traversal-ii/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/"&gt;107. Binary Tree Level Order Traversal II&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; levelOrderBottom(TreeNode *root) {
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result;

        queue&amp;lt;TreeNode *&amp;gt; q;
        TreeNode *last, *end;
        if (root) {
            q.push(root);
            end = root;
            last = end;
            result.push_back(vector&amp;lt;int&amp;gt;{});
        }
        while (!q.empty()) {
            TreeNode *temp = q.front();
            result[result.size() - 1].push_back(temp-&amp;gt;val);
            q.pop();
            if (temp-&amp;gt;left)q.push(temp-&amp;gt;left);
            if (temp-&amp;gt;right)q.push(temp-&amp;gt;right);
            if (temp == last &amp;amp;&amp;amp; !q.empty())result.push_back(vector&amp;lt;int&amp;gt;{}); // 达到一层结尾还有元素就增加一个空 vector
            if (temp == last)last=q.back();
        }
        reverse(result.begin(), result.end());
        return result;
    }
};


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
二叉树的层序遍历，稍微修改一下就行。
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (34/34)

Runtime: 4 ms, faster than 91.99% of C++ submissions.

Memory Usage: 12.5 MB, less than 97.56% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode107-binary-tree-level-order-traversal-ii/</guid><pubDate>Thu, 24 Sep 2020 20:07:52 GMT</pubDate></item><item><title>Leetcode108 Convert Sorted Array to Binary Search Tree</title><link>https://fpghwd.github.io/posts/leetcode108-convert-sorted-array-to-binary-search-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"&gt;108. Convert Sorted Array to Binary Search Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    TreeNode *sortedArrayToBST(vector&amp;lt;int&amp;gt; &amp;amp;nums) {
        // create tree
        return toHeightBST(nums, 0, nums.size() - 1);
    }

    TreeNode *toHeightBST(vector&amp;lt;int&amp;gt; &amp;amp;nums, int l, int r) {
        if (l &amp;gt; r)
            return NULL;
        int mid = l + (r - l) / 2;
        TreeNode *root = new TreeNode(nums[mid]);
        root-&amp;gt;left = toHeightBST(nums, l, mid - 1);
        root-&amp;gt;right = toHeightBST(nums, mid + 1, r);
        return root;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
一开始以为是树的高度的调整题，后来发现这个和 &lt;b&gt;用数组表示的树构造一棵树&lt;/b&gt; 的做法差不多。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode108-convert-sorted-array-to-binary-search-tree/</guid><pubDate>Thu, 24 Sep 2020 19:35:49 GMT</pubDate></item><item><title>Leetcode937 Reorder Data in Log Files</title><link>https://fpghwd.github.io/posts/leetcode937-reorder-data-in-log-files/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/reorder-data-in-log-files/"&gt;937. Reorder Data in Log Files&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        vector&amp;lt;string&amp;gt; reorderLogFiles(vector&amp;lt;string&amp;gt; &amp;amp;logs) {
            stable_sort(begin(logs), end(logs), [](auto &amp;amp;a, auto &amp;amp;b) {
                auto A = 1 + a.find(' '), B = 1 + b.find(' ');
                return a[A] &amp;gt; '@' &amp;amp;&amp;amp;
                    (b[B] &amp;lt; '@' ||
                     a.substr(A).append(a, 0, A) &amp;lt; b.substr(B).append(b, 0, B));
            });
            return logs;
        }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
先找到 identifier 和后面部分的分隔点 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; ，然后用 &lt;code&gt;'@'&lt;/code&gt; 作为判断后面是数字还是字母的基准。ASCII 码表中， &lt;code&gt;'0'&lt;/code&gt; 和 &lt;code&gt;'9'&lt;/code&gt; 分别是 48 和 57 ， &lt;code&gt;'@'&lt;/code&gt; 是 64 ， &lt;code&gt;'a'&lt;/code&gt; 和 &lt;code&gt;'z'&lt;/code&gt; 分别是 97 和 122 。 &lt;code&gt;return&lt;/code&gt; 后的部分同时保证了 letter-logs 排在 digit-logs 的前面；后部分（数字或者字母）拼接 identifier 后用字典序排列，也即后部分如果恰好相同时， identifier dominating。
&lt;/p&gt;

&lt;p&gt;
这个写法是翻解答时看到的，比较简洁，如果熟悉 sort 的话也比较容易懂。sort 的关键还是后面的函数 &lt;code&gt;template&amp;lt; class RandomIt, class Compare &amp;gt; void stable_sort( RandomIt first, RandomIt last, Compare comp );&lt;/code&gt; 。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode937-reorder-data-in-log-files/</guid><pubDate>Thu, 24 Sep 2020 04:31:36 GMT</pubDate></item><item><title>Leetcode700 Flood Fill</title><link>https://fpghwd.github.io/posts/leetcode700-flood-fill/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近做了这道题（&lt;a href="https://leetcode.com/problems/flood-fill/"&gt;733. Flood Fill&lt;/a&gt;）无法提交，用了 gdb 调试可能因为 image 的 size 有点小所以也没有问题。
&lt;/p&gt;

&lt;p&gt;
但是提交到 leetcode 的时候就提示：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;Status: Runtime Error

AddressSanitizer:DEADLYSIGNAL
=================================================================
==33==ERROR: AddressSanitizer: stack-overflow on address 0x7ffe804b8fc0 (pc 0x000000383a89 bp 0x7ffe804b9190 sp 0x7ffe804b8fc0 T0)
==33==ABORTING
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Incomplete Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; floodFill(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;image, int sr, int sc,
                                      int newColor) {
            int tmp_color = image[sr][sc];
            if (tmp_color == newColor)
                return image;

            // paint
            if (image[sr][sc] != 0)
                image[sr][sc] = newColor;

            // paint others
            if (sr - 1 &amp;gt;= 0 &amp;amp;&amp;amp; tmp_color == image[sr - 1][sc])
                floodFill(image, sr - 1, sc, newColor);
            if (sr + 1 &amp;lt; image.size() &amp;amp;&amp;amp; tmp_color == image[sr + 1][sc])
                floodFill(image, sr + 1, sc, newColor);
            if (sc - 1 &amp;gt;= 0 &amp;amp;&amp;amp; tmp_color == image[sr][sc - 1])
                floodFill(image, sr, sc - 1, newColor);
            if (sc + 1 &amp;lt; image[0].size() &amp;amp;&amp;amp; tmp_color == image[sr][sc + 1])
                floodFill(image, sr, sc + 1, newColor);

            return image;
        }

};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
并不知道哪里出了问题，先记下来再说。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode700-flood-fill/</guid><pubDate>Wed, 16 Sep 2020 17:13:28 GMT</pubDate></item><item><title>Leetcode606 Construct String from Binary Tree</title><link>https://fpghwd.github.io/posts/leetcode606-construct-string-from-binary-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/construct-string-from-binary-tree/"&gt;606. Construct String from Binary Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    public:
        string tree2str(TreeNode* t) {
            if(t == nullptr)return result;
            result.append(to_string(t-&amp;gt;val));
            if(t-&amp;gt;left){
                result.append(1,'(');
                tree2str(t-&amp;gt;left);
                result.append(1,')');
            }else{
                if(t-&amp;gt;right){
                    result.append("()");
                }
            }
            if(t-&amp;gt;right){
                result.append(1,'(');
                tree2str(t-&amp;gt;right);
                result.append(1,')');
            }
            return result;
        }
    private:
        string result;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Leetcode result&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (162/162)

Runtime: 56 ms, faster than 20.91% of C++ submissions.

Memory Usage: 144.4 MB, less than 6.22% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
结果排倒数 ，以及显示不了:)这个emoji。&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode606-construct-string-from-binary-tree/</guid><pubDate>Tue, 15 Sep 2020 20:23:51 GMT</pubDate></item><item><title>Leetcode487 Next Greater Element I</title><link>https://fpghwd.github.io/posts/leetcode487-next-greater-element-i/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/next-greater-element-i/"&gt;487. Next Greater Element I&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;unordered_map&amp;gt;
#include &amp;lt;stack&amp;gt;

using namespace std;

class Solution {
public:
    vector&amp;lt;int&amp;gt; nextGreaterElement(vector&amp;lt;int&amp;gt;&amp;amp; nums1, vector&amp;lt;int&amp;gt;&amp;amp; nums2) {
        unordered_map&amp;lt;int, int&amp;gt; mp;
        stack&amp;lt;int&amp;gt; s;
        for(int num : nums2){
            while(!s.empty() and s.top()&amp;lt;num)
                mp[s.top()] = num, s.pop(); // , trick
            s.push(num);
        }

        for(int &amp;amp;num : nums1)
            num = (mp.find(num) == mp.end()) ? -1 : mp[num];

        return nums1;
    }
};

// Input: nums1 = [2,4], nums2 = [1,2,3,4].

int main(int arch, char **argv){

    vector&amp;lt;int&amp;gt; nums1 = {2,4}, nums2 = {1,2,3,4};
    auto solution = new Solution();
    solution-&amp;gt;nextGreaterElement(nums1, nums2);

    return 0;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
开始没有看太懂题目的意思，解答也看不懂。后来在 gud-gdb 下调试了一下，才懂了一点点。Map 的作用是存 nums2 中每个 element 的后面第一个比自身大的 element, stack 的作用是暂存正在处理的位置吧（没有想出来如何更好的表达）。num1 是 nums2 的字集，那么再遍历一遍 map 就可以得到 nums1 中每个元素的在 nums2 的位置上后面的第一个比它大的元素了。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode487-next-greater-element-i/</guid><pubDate>Mon, 14 Sep 2020 18:51:50 GMT</pubDate></item></channel></rss>