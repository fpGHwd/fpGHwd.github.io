<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dichotomy (Posts about leetcode)</title><link>https://fpghwd.github.io/</link><description></description><atom:link href="https://fpghwd.github.io/categories/leetcode.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;suzumiya natsuhi&lt;/a&gt; </copyright><lastBuildDate>Wed, 16 Sep 2020 04:25:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Leetcode606 Construct String from Binary Tree</title><link>https://fpghwd.github.io/posts/leetcode606-construct-string-from-binary-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/construct-string-from-binary-tree/"&gt;606. Construct String from Binary Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    public:
        string tree2str(TreeNode* t) {
            if(t == nullptr)return result;
            result.append(to_string(t-&amp;gt;val));
            if(t-&amp;gt;left){
                result.append(1,'(');
                tree2str(t-&amp;gt;left);
                result.append(1,')');
            }else{
                if(t-&amp;gt;right){
                    result.append("()");
                }
            }
            if(t-&amp;gt;right){
                result.append(1,'(');
                tree2str(t-&amp;gt;right);
                result.append(1,')');
            }
            return result;
        }
    private:
        string result;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Leetcode result&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (162/162)

Runtime: 56 ms, faster than 20.91% of C++ submissions.

Memory Usage: 144.4 MB, less than 6.22% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode606-construct-string-from-binary-tree/</guid><pubDate>Tue, 15 Sep 2020 20:23:51 GMT</pubDate></item><item><title>Leetcode487 Next Greater Element I</title><link>https://fpghwd.github.io/posts/leetcode487-next-greater-element-i/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/next-greater-element-i/"&gt;487. Next Greater Element I&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;unordered_map&amp;gt;
#include &amp;lt;stack&amp;gt;

using namespace std;

class Solution {
public:
    vector&amp;lt;int&amp;gt; nextGreaterElement(vector&amp;lt;int&amp;gt;&amp;amp; nums1, vector&amp;lt;int&amp;gt;&amp;amp; nums2) {
        unordered_map&amp;lt;int, int&amp;gt; mp;
        stack&amp;lt;int&amp;gt; s;
        for(int num : nums2){
            while(!s.empty() and s.top()&amp;lt;num)
                mp[s.top()] = num, s.pop(); // , trick
            s.push(num);
        }

        for(int &amp;amp;num : nums1)
            num = (mp.find(num) == mp.end()) ? -1 : mp[num];

        return nums1;
    }
};

// Input: nums1 = [2,4], nums2 = [1,2,3,4].

int main(int arch, char **argv){

    vector&amp;lt;int&amp;gt; nums1 = {2,4}, nums2 = {1,2,3,4};
    auto solution = new Solution();
    solution-&amp;gt;nextGreaterElement(nums1, nums2);

    return 0;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
开始没有看太懂题目的意思，解答也看不懂。后来在 gud-gdb 下调试了一下，才懂了一点点。Map 的作用是存 nums2 中每个 element 的后面第一个比自身大的 element, stack 的作用是暂存正在处理的位置吧（没有想出来如何更好的表达）。num1 是 nums2 的字集，那么再遍历一遍 map 就可以得到 nums1 中每个元素的在 nums2 的位置上后面的第一个比它大的元素了。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode487-next-greater-element-i/</guid><pubDate>Mon, 14 Sep 2020 18:51:50 GMT</pubDate></item><item><title>Leetcode589 N-ary Tree Preorder Traversal</title><link>https://fpghwd.github.io/posts/leetcode742-n-ary-tree-preorder-traversal/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/n-ary-tree-preorder-traversal"&gt;589. N-ary Tree Preorder Traversal&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        vector&amp;lt;int&amp;gt; preorder(Node* root) {
            if(root==nullptr)return preorder_vi;
            preorder_vi.push_back(root-&amp;gt;val);
            for(Node* n:root-&amp;gt;children){
                preorder(n);
            }
            return preorder_vi;
        }
    private:
        vector&amp;lt;int&amp;gt; preorder_vi;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
虽然这个返回有点丑陋，不想写第二个函数，尽管感觉总是怪怪的。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;更新：&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
奇怪主要因为这个 &lt;code&gt;preorder_vi&lt;/code&gt; 的返回看起来有点多余，可能以前习惯写的遍历都是返回 &lt;code&gt;void&lt;/code&gt; ，导致有这样的错觉。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode742-n-ary-tree-preorder-traversal/</guid><pubDate>Mon, 14 Sep 2020 04:09:43 GMT</pubDate></item><item><title>Leetcode893 IncreasingOrderSearch Tree</title><link>https://fpghwd.github.io/posts/leetcode893-increasingordersearch-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/increasing-order-search-tree/"&gt;893. IncreasingOrderSearch Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        TreeNode* increasingBST(TreeNode* root) {
            if(root == nullptr)return nullptr;
            TreeNode *first = root, *last = root;
            inOrderRecursion(root, first, last);
            return first;
        }

       void inOrderRecursion(TreeNode* root,TreeNode*&amp;amp; first, TreeNode*&amp;amp; last){

           if(root == nullptr)return;
           TreeNode *first1, *last1;

           if(root-&amp;gt;left){
               last1 = root-&amp;gt;left;
               first = root-&amp;gt;left;
               inOrderRecursion(root-&amp;gt;left, first, last1);
               last1-&amp;gt;left = nullptr; last1-&amp;gt;right=root;
           }
           if(root-&amp;gt;right){
               first1 = root-&amp;gt;right;
               last = root-&amp;gt;right;
               inOrderRecursion(root-&amp;gt;right,first1,last);
               root-&amp;gt;left = nullptr; root-&amp;gt;right = first1;
           }
        }

};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode893-increasingordersearch-tree/</guid><pubDate>Sun, 13 Sep 2020 01:10:47 GMT</pubDate></item><item><title>Leetcode1200 minimum absolute difference</title><link>https://fpghwd.github.io/posts/leetcode1200-minimum-absolute-difference/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/minimum-absolute-difference/"&gt;1200. Minimum Absolute Difference&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;class Solution {
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; minimumAbsDifference(vector&amp;lt;int&amp;gt;&amp;amp; arr) {
        sort(arr.begin(), arr.end());
        int v = -1;
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; mad;
        for(int i = 0; i + 1 &amp;lt; arr.size(); i++){
            vector&amp;lt;int&amp;gt; tmp;
            if( v == -1 || arr[i+1] - arr[i] &amp;lt; v){
                mad.clear();
                mad.push_back(vector&amp;lt;int&amp;gt;{arr[i],arr[i+1]});
                v = arr[i+1] - arr[i];
            }else{
                if(arr[i+1] - arr[i] == v){
                    mad.push_back(vector&amp;lt;int&amp;gt;{arr[i],arr[i+1]});
                }
            }
        }
        return mad;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode1200-minimum-absolute-difference/</guid><pubDate>Fri, 11 Sep 2020 19:43:01 GMT</pubDate></item><item><title>Leetcode41 First Missing Positive</title><link>https://fpghwd.github.io/posts/leetcode41-first-missing-positive/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
Given an unsorted integer array, find the smallest missing positive integer.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Example 1&lt;/b&gt;:
Input: [1,2,0]
Output: 3
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Example 2&lt;/b&gt;:
Input: [3,4,-1,1]
Output: 2
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Example 3&lt;/b&gt;:
Input: [7,8,9,11,12]
Output: 1
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Note&lt;/b&gt;:
Your algorithm should run in O(n) time and uses constant extra space.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;思路:&lt;/b&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;排序占用 O(nlogn)的时间复杂度;&lt;/li&gt;
&lt;li&gt;丢失意味着需要一定程度的排序,才能知道哪个是丢失的;&lt;/li&gt;
&lt;li&gt;最小的正数,说明负数和 0 不参与排序;&lt;/li&gt;
&lt;li&gt;证明复杂度为 O(n). 因为每次交换都将一个正数 nums[k]放到 nums 中 nums[k]-1 的位置上,因此复杂度是 O(n).&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-cpp"&gt;class Solution {
public:
    int firstMissingPositive(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int len = nums.size(), tmp;

        for(int i = 0; i &amp;lt; len; i++){
            while(nums[i] &amp;gt;= 1 &amp;amp;&amp;amp; nums[i] &amp;lt;= len &amp;amp;&amp;amp; nums[i]!=i+1 &amp;amp;&amp;amp; nums[nums[i]-1]!=nums[i]){
                tmp = nums[nums[i]-1];
                nums[nums[i]-1]=nums[i];
                nums[i] = tmp;
            }
        }

        for(int i = 0; i &amp;lt; len; i++){
            if(nums[i]!=i+1){
                return i+1;
            }
        }
        return len+1;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode41-first-missing-positive/</guid><pubDate>Sat, 04 Jul 2020 17:36:01 GMT</pubDate></item><item><title>Leetcode405 Convert a Number to Hexadecimal</title><link>https://fpghwd.github.io/posts/bu-ma/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
这道题要将有符号数转化为 16 进制表示法. 有号整数在计算机内是补码表, 所以将数字的补码转化为 16 进制即可.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;原码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
在指定数字范围和位数上限后, 原码最高位为符号, 其他位为数字的绝对值二进制表示. 例如: 5 为 00000000, -4 为 10000100
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;反码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
反码: 原码的进一步表示. 但是对于 0 有两种表示方法(假设位数上限为 8 位, 00000000 和 10000000), 且对于负数的运算并不直观: 例如(-5)+1=-4, 10000101+1=10000100 在位运算上不直观(此处的直观是指计算机的位运算)
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;补码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
补码: 补码的操作看起来复杂(反码除符号位取反,然后加 1), 但是最终的目的还是解决掉反码表示的两个问题(0 的两个表示和负数的运算直观性). 其实我觉得换我来设计也是一样的.
&lt;/p&gt;

&lt;p&gt;
8 位能表示 2&lt;sup&gt;8&lt;/sup&gt; 个数, 如果对于无符号(正数)可以表示从 0~255 这 256 个数(可能是 0~255, 也可以是 2~257, 3~258 等等), 而对于有符号整数, 同样可以表示 256 个. 假设我们从 0~255 中把 128~255 这 128 个数的位置腾出来给负数, 那可以表示-128~-1 这 128 个数. 整体情况就是用了 8 位表示-128~127 这 256 个数. 之前的两个问题已经解决了一个, 那就是 0 的重合问题, 现在要解决的就是运算的直观性. 其实一眼就看出来了: 在表示的 128~255 中本来就有运算直观性, 现在要做的就是把 -128~-1 放到 100000000~11111111 这 128 个位置中而已. 然后刚好 11111111 代表-1, 11111111(-1)+1=00000000(0), 刚好合适. 其实这里写了很多, 不如公式里面写的更为清楚. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;8 位求补码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
把原码(128/10000000~255/11111111)映射为(-128/10000000~-1/11111111), 其实就是数字-256: 128 + (-256) = -128, 255 + (-256) = -1, 因为 128 和 255 的原码我们很容易得到,而后面负数就是原来我们需要转换的负数.
所以对于负数而言, 求原码的稍微转换一下: 原码数 + (-256) = 原数.
&lt;/p&gt;

&lt;p&gt;
那么我们来求一个-24 的原码: -2(原数) + 256 = 254(原码数), 254 是 11111110, 所以-2 的补码就是 11111110
我觉得中间反码的概念对于设计过程理解而言可能有用, 但是对于转码就直接用公式就可以了: 当原数为正,补码就是原码; 当原数为负, 补码就是原数+256 后的原码.(这里以 8 位为例子, int 就是 32 位)  
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-cpp"&gt;class Solution {
public:
    string toHex(int num) {
        string ret = "";
        unsigned int n;
        if(num &amp;lt; 0)n =  ~(abs(num))+1;
        else if(num == 0)return "0";
        else n = num;

        while(n){
            ret.insert(0,1,(n%16 &amp;gt;= 10)?(n%16 - 10 + 'a'):(n%16 + '0'));
            n /= 16;
        }

        return ret;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
其中 &lt;code&gt;n = ~(abs(num)) + 1&lt;/code&gt; 就是求反码的过程. 之前最高位 8 位时已经得到反码公式: &lt;code&gt;原数 + 2^8  = 反码数&lt;/code&gt; 可以直接转化为反码. 那么在考虑到类型转换的原因, 不能让运算过程中发生隐性的类型转换(256 不能用八位表示, 且不能用 long 或者其他高位数来参与运算), 那么原来的过程可以转化为 &lt;code&gt;原数 + 255 + 1 = 反码数&lt;/code&gt;, 同时考虑到原数是负数, 进一步转化为 &lt;code&gt;255 - (-原数) + 1 = 反码数&lt;/code&gt;, 现在把 &lt;code&gt;255 - (-原数)&lt;/code&gt; 单独拿出来就是 &lt;code&gt;255 - abs(原数)&lt;/code&gt;, 用求反符号代替 &lt;code&gt;255 -&lt;/code&gt; , 原式最终转化为 &lt;code&gt;反码数 = ~(abs(原数)) + 1&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
同样在 int 为 32 位的情况中, 求反码的公式为: &lt;code&gt;反码数 = ~abs(原数) + 1&lt;/code&gt; .
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/bu-ma/</guid><pubDate>Mon, 22 Jun 2020 01:14:03 GMT</pubDate></item></channel></rss>