<p>
<a href="https://leetcode.com/problems/reverse-linked-list-ii/">92. Reverse Linked List II</a>
</p>

<p>
<b>Solution</b>
</p>

<div class="org-src-container">

<pre><code class="lang-C">
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
  public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        if (m == n) // &#24403; m = n &#26102;&#24182;&#27809;&#26377;&#21464;&#21270;
            return head;

        int i = 1;
        ListNode *psuedo_head = new ListNode(), *pre = psuedo_head, *n_pre;

        for (ListNode *w = head; w;) {
            if (i &lt;= m || i &gt; n) {
                if (i == m)
                    n_pre = w;
                pre-&gt;next = w;
                if (i != m)
                    pre = w;
                w = w-&gt;next;
            } else if (i &gt; m &amp;&amp; i &lt;= n) {
                ListNode *tmp = w;
                w = w-&gt;next;
                tmp-&gt;next = pre-&gt;next;
                pre-&gt;next = tmp;
                if (i == n)
                    pre = n_pre;
            }
            i++;
        }

        pre-&gt;next = nullptr; // &#23614;&#33410;&#28857;&#21518;&#32493;&#26159; null

        return psuedo_head-&gt;next;
    }
};

</code></pre>

</div>

<div class="org-src-container">

<pre><code class="lang-html">
Status: Accepted (44/44)

Runtime: 4 ms, faster than 64.43% of C++ submissions.

Memory Usage: 7.8 MB, less than 16.96% of C++ submissions.

</code></pre>

</div>

<p>
第一次做的时候没想那么多，暴力的做法。后来做的时候就想到这是将链表的导致的前插和尾插组合在一起的题。并不难，只要分别搞清楚这两种写法就能写出来。
</p>
