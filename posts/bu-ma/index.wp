<p>
这道题要将有符号数转化为16进制表示法. 有符号整数在计算机内是补码表, 所以将数字的补码转化为16进制即可.
</p>


<p>
<b>原码</b>
</p>

<p>
在指定数字范围和位数上限后, 原码最高位为符号, 其他位为数字的绝对值二进制表示. 例如: 5为00000000, -4为10000100
</p>


<p>
<b>反码</b>
</p>

<p>
反码: 原码的进一步表示. 但是对于0有两种表示方法(假设位数上限为8位, 00000000和10000000), 且对于负数的运算并不直观: 例如(-5)+1=-4, 10000101+1=10000100在位运算上不直观(此处的直观是指计算机的位运算)
</p>


<p>
<b>补码</b>
</p>

<p>
补码: 补码的操作看起来复杂(反码除符号位取反,然后加1), 但是最终的目的还是解决掉反码表示的两个问题(0的两个表示和负数的运算直观性). 其实我觉得换我来设计也是一样的.
</p>

<p>
8位能表示 2<sup>8</sup> 个数, 如果对于无符号(正数)可以表示从0~255这256个数(可能是0~255, 也可以是2~257, 3~258等等), 而对于有符号整数, 同样可以表示256个. 假设我们从0~255中把128~255这128个数的位置腾出来给负数, 那可以表示-128~-1这128个数. 整体情况就是用了8位表示-128~127这256个数. 之前的两个问题已经解决了一个, 那就是0的重合问题, 现在要解决的就是运算的直观性. 其实一眼就看出来了: 在表示的128~255中本来就有运算直观性, 现在要做的就是把 -128~-1 放到 100000000~11111111 这128个位置中而已. 然后刚好11111111代表-1, 11111111(-1)+1=00000000(0), 刚好合适. 其实这里写了很多, 不如公式里面写的更为清楚. 
</p>


<p>
<b>8位求补码</b>
</p>

<p>
把原码(128/10000000~255/11111111)映射为(-128/10000000~-1/11111111), 其实就是数字-256: 128 + (-256) = -128, 255 + (-256) = -1, 因为128和255的原码我们很容易得到,而后面负数就是原来我们需要转换的负数.
所以对于负数而言, 求原码的稍微转换一下: 原码数 + (-256) = 原数.
</p>

<p>
那么我们来求一个-24的原码: -2(原数) + 256 = 254(原码数), 254是11111110, 所以-2的补码就是11111110
我觉得中间反码的概念对于设计过程理解而言可能有用, 但是对于转码就直接用公式就可以了: 当原数为正,补码就是原码; 当原数为负, 补码就是原数+256后的原码.(这里以8位为例子, int就是32位)  
</p>


<p>
<b>Solution</b>
</p>

<div class="org-src-container">

<pre><code class="lang-cpp">class Solution {
public:
    string toHex(int num) {
        string ret = "";
        unsigned int n;
        if(num &lt; 0)n =  ~(abs(num))+1;
        else if(num == 0)return "0";
        else n = num;

        while(n){
            ret.insert(0,1,(n%16 &gt;= 10)?(n%16 - 10 + 'a'):(n%16 + '0'));
            n /= 16;
        }

        return ret;
    }
};
</code></pre>

</div>

<p>
其中 <code>n = ~(abs(num)) + 1</code> 就是求反码的过程. 之前最高位8位时已经得到反码公式: <code>原数 + 2^8  = 反码数</code> 可以直接转化为反码. 那么在考虑到类型转换的原因, 不能让运算过程中发生隐性的类型转换(256不能用八位表示, 且不能用long或者其他高位数来参与运算), 那么原来的过程可以转化为 <code>原数 + 255 + 1 = 反码数</code>, 同时考虑到原数是负数, 进一步转化为 <code>255 - (-原数) + 1 = 反码数</code>, 现在把 <code>255 - (-原数)</code> 单独拿出来就是 <code>255 - abs(原数)</code>, 用求反符号代替 <code>255 -</code> , 原式最终转化为 <code>~(abs(原数)) + 1</code>. 
</p>

<p>
同样在int为32位的情况中, 求反码的公式为: <code>反码数 = ~abs(原数) + 1</code> .
</p>
