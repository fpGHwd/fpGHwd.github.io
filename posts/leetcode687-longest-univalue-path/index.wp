<p>
<a href="https://leetcode.com/problems/longest-univalue-path/">687. Longest Univalue Path</a>
</p>

<p>
<b>Solution</b>
</p>

<div class="org-src-container">

<pre><code class="lang-C">
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */

class Solution {
  public:
    int luvp = 0;
    int longestUnivaluePath(TreeNode *root) {
        if (root == nullptr)
            return 0;
        travelPath(root);
        return luvp - 1;
    }

    int travelPath(TreeNode *root) {
        int left = 0, right = 0;
        if (root-&gt;left != nullptr)
            left = travelPath(root-&gt;left);
        if (root-&gt;right != nullptr)
            right = travelPath(root-&gt;right);
        int left_tmp =
            ((root-&gt;left &amp;&amp; root-&gt;left-&gt;val == root-&gt;val) ? left : 0);
        int right_tmp =
            ((root-&gt;right &amp;&amp; root-&gt;right-&gt;val == root-&gt;val) ? right : 0);
        luvp = max(luvp, 1 + left_tmp + right_tmp);
        return 1 + max(left_tmp, right_tmp);
    }
};

</code></pre>

</div>

<div class="org-src-container">

<pre><code class="lang-html">
Status: Accepted (71/71)

Runtime: 184 ms, faster than 86.14% of C++ submissions.

Memory Usage: 72.6 MB, less than 5.21% of C++ submissions.

</code></pre>

</div>

<p>
第一次做的时候没有做出来，觉得有点复杂。不过说到底还只是一个简单的树遍历，当然可以认为和求树深度的那类题其实差不多。其中每个点的处理就是找到是否比现有的最长路径 <code>luvp - 1</code> 更长的 <code>1 + left_tmp + right_tmp</code> ，然后返回的若是 <code>1 + left_tmp + right_tmp</code> ，那么得出来的结果不是 <b>最长的path</b> ，而是相同值最多的相邻点个数。所以最后修改一下，返回稍长的路径即可。
</p>

<p>
树的题，递归是最简洁的。
</p>
