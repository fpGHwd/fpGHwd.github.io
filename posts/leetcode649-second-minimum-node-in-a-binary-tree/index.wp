<p>
<a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/">671. Second Minimum Node In a Binary Tree</a>
</p>

<p>
<b>Solution</b>
</p>

<div class="org-src-container">

<pre><code class="lang-C">
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    int fm = -1, sm = -1;
    int findSecondMinimumValue(TreeNode *root) {
        if (root == NULL)
            return sm;

        if (fm == -1)
            fm = root-&gt;val;
        else {
            if (sm == -1) {
                if (root-&gt;val &gt; fm)
                    sm = root-&gt;val;
                else if (root-&gt;val &lt; fm) {
                    sm = fm;
                    fm = root-&gt;val;
                } else {
                    // do nothing
                }
            } else {
                if (root-&gt;val &gt; sm) {
                    // do noting
                } else if (root-&gt;val &lt; fm) {
                    sm = fm;
                    fm = root-&gt;val;
                } else if (root-&gt;val == sm || root-&gt;val == fm) {
                    // do nothing
                } else { // root-&gt;val &gt; fm and root-&gt;val &lt; sm;
                    sm = root-&gt;val;
                }
            }
        }

        findSecondMinimumValue(root-&gt;left);
        findSecondMinimumValue(root-&gt;right);

        return sm;
    }
};

</code></pre>

</div>

<div class="org-src-container">

<pre><code class="lang-html">
Status: Accepted (35/35)

Runtime: 0 ms, faster than 100.00% of C++ submissions.

Memory Usage: 7.2 MB, less than 17.00% of C++ submissions.

</code></pre>

</div>

<p>
自从学会了一种偷懒的写法之后，就一直用这种 travel 的方法。
</p>
