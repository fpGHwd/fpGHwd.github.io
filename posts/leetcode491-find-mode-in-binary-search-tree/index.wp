<p>
<a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/">501. Find Mode in Binary Search Tree</a>
</p>

<p>
<b>Solution</b>
</p>

<div class="org-src-container">

<pre><code class="lang-C">
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    vector&lt;int&gt; findMode(TreeNode *root) {
        if (root == NULL)
            return vector&lt;int&gt;{};
        vector&lt;int&gt; path, mode;
        travelMidOrder(root, path);
        int k, n = 0;
        for (int i = 0; i &lt; path.size(); i = k) {
            k = i;
            while (k &lt; path.size() &amp;&amp; path[k] == path[i])
                k++;
            if (k - i &gt; n) {
                mode.clear();
                mode.push_back(path[i]);
                n = k - i;
            } else if (k - i == n)
                mode.push_back(path[i]);
        }

        return mode;
    }

    void travelMidOrder(TreeNode *root, vector&lt;int&gt; &amp;path) {
        if (root == nullptr)
            return;
        if (root-&gt;left)
            travelMidOrder(root-&gt;left, path);
        path.push_back(root-&gt;val);
        if (root-&gt;right)
            travelMidOrder(root-&gt;right, path);
    }
};

</code></pre>

</div>

<div class="org-src-container">

<pre><code class="lang-html">
Status: Accepted (25/25)

Runtime: 24 ms, faster than 94.02% of C++ submissions.

Memory Usage: 24.9 MB, less than 56.91% of C++ submissions.

</code></pre>

</div>
