<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>suzumiya's blog</title><link>https://fpghwd.github.io/</link><description>This is a demo site for Nikola.</description><atom:link href="https://fpghwd.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;suzumiya haruhi&lt;/a&gt; </copyright><lastBuildDate>Thu, 09 Jul 2020 03:46:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Makefile&amp;emacs</title><link>https://fpghwd.github.io/posts/makefileemacs/</link><dc:creator>suzumiya haruhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
这篇博客可能没有重点，我觉得博客改个更日常的标题更为合适:)
&lt;/p&gt;

&lt;p&gt;
&amp;lt;img src="&lt;a href="https://www.google.com/imgres?imgurl=https://pic.17qq.com/uploads/wkfsmhhgsy.jpeg&amp;amp;imgrefurl=https://j.17qq.com/article/hihpdfpfz.html&amp;amp;tbnid=L4CK0-goG7pXwM&amp;amp;vet=12ahUKEwjNy-LJoL_qAhXMkJ4KHbpvD1UQMygLegUIARCUAQ..i&amp;amp;docid=-8-LbKnbKy7zVM&amp;amp;w=533&amp;amp;h=300&amp;amp;q=%E6%97%A5%E5%B8%B8%20%E5%8A%A8%E7%94%BB%20&amp;amp;ved=2ahUKEwjNy-LJoL_qAhXMkJ4KHbpvD1UQMygLegUIARCUAQ"&gt;https://www.google.com/imgres?imgurl=https://pic.17qq.com/uploads/wkfsmhhgsy.jpeg&amp;amp;imgrefurl=https://j.17qq.com/article/hihpdfpfz.html&amp;amp;tbnid=L4CK0-goG7pXwM&amp;amp;vet=12ahUKEwjNy-LJoL_qAhXMkJ4KHbpvD1UQMygLegUIARCUAQ..i&amp;amp;docid=-8-LbKnbKy7zVM&amp;amp;w=533&amp;amp;h=300&amp;amp;q=日常 动画 &amp;amp;ved=2ahUKEwjNy-LJoL_qAhXMkJ4KHbpvD1UQMygLegUIARCUAQ&lt;/a&gt;" alt="" align="left" title="image title" class="img" /&amp;gt;
&lt;/p&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/makefileemacs/</guid><pubDate>Wed, 08 Jul 2020 19:45:25 GMT</pubDate></item><item><title>Leetcode41 First Missing Positive</title><link>https://fpghwd.github.io/posts/leetcode41-first-missing-positive/</link><dc:creator>suzumiya haruhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
Given an unsorted integer array, find the smallest missing positive integer.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Example 1&lt;/b&gt;:
Input: [1,2,0]
Output: 3
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Example 2&lt;/b&gt;:
Input: [3,4,-1,1]
Output: 2
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Example 3&lt;/b&gt;:
Input: [7,8,9,11,12]
Output: 1
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Note&lt;/b&gt;:
Your algorithm should run in O(n) time and uses constant extra space.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;思路:&lt;/b&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;排序占用O(nlogn)的时间复杂度;&lt;/li&gt;
&lt;li&gt;丢失意味着需要一定程度的排序,才能知道哪个是丢失的;&lt;/li&gt;
&lt;li&gt;最小的正数,说明负数和0不参与排序;&lt;/li&gt;
&lt;li&gt;证明复杂度为O(n). 因为每次交换都将一个正数nums[k]放到nums中nums[k]-1的位置上,因此复杂度是O(n).&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-cpp"&gt;class Solution {
public:
    int firstMissingPositive(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int len = nums.size(), tmp;

        for(int i = 0; i &amp;lt; len; i++){
            while(nums[i] &amp;gt;= 1 &amp;amp;&amp;amp; nums[i] &amp;lt;= len &amp;amp;&amp;amp; nums[i]!=i+1 &amp;amp;&amp;amp; nums[nums[i]-1]!=nums[i]){
                tmp = nums[nums[i]-1];
                nums[nums[i]-1]=nums[i];
                nums[i] = tmp;
            }
        }

        for(int i = 0; i &amp;lt; len; i++){
            if(nums[i]!=i+1){
                return i+1;
            }
        }
        return len+1;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode41-first-missing-positive/</guid><pubDate>Sat, 04 Jul 2020 17:36:01 GMT</pubDate></item><item><title>Leetcode405 Convert a Number to Hexadecimal</title><link>https://fpghwd.github.io/posts/bu-ma/</link><dc:creator>suzumiya haruhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
这道题要将有符号数转化为16进制表示法. 有符号整数在计算机内是补码表, 所以将数字的补码转化为16进制即可.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;原码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
在指定数字范围和位数上限后, 原码最高位为符号, 其他位为数字的绝对值二进制表示. 例如: 5为00000000, -4为10000100
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;反码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
反码: 原码的进一步表示. 但是对于0有两种表示方法(假设位数上限为8位, 00000000和10000000), 且对于负数的运算并不直观: 例如(-5)+1=-4, 10000101+1=10000100在位运算上不直观(此处的直观是指计算机的位运算)
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;补码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
补码: 补码的操作看起来复杂(反码除符号位取反,然后加1), 但是最终的目的还是解决掉反码表示的两个问题(0的两个表示和负数的运算直观性). 其实我觉得换我来设计也是一样的.
&lt;/p&gt;

&lt;p&gt;
8位能表示 2&lt;sup&gt;8&lt;/sup&gt; 个数, 如果对于无符号(正数)可以表示从0~255这256个数(可能是0~255, 也可以是2~257, 3~258等等), 而对于有符号整数, 同样可以表示256个. 假设我们从0~255中把128~255这128个数的位置腾出来给负数, 那可以表示-128~-1这128个数. 整体情况就是用了8位表示-128~127这256个数. 之前的两个问题已经解决了一个, 那就是0的重合问题, 现在要解决的就是运算的直观性. 其实一眼就看出来了: 在表示的128~255中本来就有运算直观性, 现在要做的就是把 -128~-1 放到 100000000~11111111 这128个位置中而已. 然后刚好11111111代表-1, 11111111(-1)+1=00000000(0), 刚好合适. 其实这里写了很多, 不如公式里面写的更为清楚. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;8位求补码&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
把原码(128/10000000~255/11111111)映射为(-128/10000000~-1/11111111), 其实就是数字-256: 128 + (-256) = -128, 255 + (-256) = -1, 因为128和255的原码我们很容易得到,而后面负数就是原来我们需要转换的负数.
所以对于负数而言, 求原码的稍微转换一下: 原码数 + (-256) = 原数.
&lt;/p&gt;

&lt;p&gt;
那么我们来求一个-24的原码: -2(原数) + 256 = 254(原码数), 254是11111110, 所以-2的补码就是11111110
我觉得中间反码的概念对于设计过程理解而言可能有用, 但是对于转码就直接用公式就可以了: 当原数为正,补码就是原码; 当原数为负, 补码就是原数+256后的原码.(这里以8位为例子, int就是32位)  
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-cpp"&gt;class Solution {
public:
    string toHex(int num) {
        string ret = "";
        unsigned int n;
        if(num &amp;lt; 0)n =  ~(abs(num))+1;
        else if(num == 0)return "0";
        else n = num;

        while(n){
            ret.insert(0,1,(n%16 &amp;gt;= 10)?(n%16 - 10 + 'a'):(n%16 + '0'));
            n /= 16;
        }

        return ret;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
其中 &lt;code&gt;n = ~(abs(num)) + 1&lt;/code&gt; 就是求反码的过程. 之前最高位8位时已经得到反码公式: &lt;code&gt;原数 + 2^8  = 反码数&lt;/code&gt; 可以直接转化为反码. 那么在考虑到类型转换的原因, 不能让运算过程中发生隐性的类型转换(256不能用八位表示, 且不能用long或者其他高位数来参与运算), 那么原来的过程可以转化为 &lt;code&gt;原数 + 255 + 1 = 反码数&lt;/code&gt;, 同时考虑到原数是负数, 进一步转化为 &lt;code&gt;255 - (-原数) + 1 = 反码数&lt;/code&gt;, 现在把 &lt;code&gt;255 - (-原数)&lt;/code&gt; 单独拿出来就是 &lt;code&gt;255 - abs(原数)&lt;/code&gt;, 用求反符号代替 &lt;code&gt;255 -&lt;/code&gt; , 原式最终转化为 &lt;code&gt;反码数 = ~(abs(原数)) + 1&lt;/code&gt;. 
&lt;/p&gt;

&lt;p&gt;
同样在int为32位的情况中, 求反码的公式为: &lt;code&gt;反码数 = ~abs(原数) + 1&lt;/code&gt; .
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/bu-ma/</guid><pubDate>Mon, 22 Jun 2020 01:14:03 GMT</pubDate></item><item><title>Nikola First Time</title><link>https://fpghwd.github.io/posts/nikola-first-time/</link><dc:creator>suzumiya haruhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近觉得自己是时候开始写博客了，然后就在自己用的openSUSE上用&lt;a href="https://snapcraft.io/search?q=Nikola"&gt;snap安装nikola&lt;/a&gt;，然后用Chen Bin的&lt;a href="https://github.com/redguardtoo/emacs.d"&gt;Emacs配置&lt;/a&gt;。最后照着&lt;a href="https://github.com/redguardtoo/org2nikola"&gt;org2nikola&lt;/a&gt;说明稍微配置了一下：大纲导出即发布，以后就可以用org来写博客了。
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;“如果无法决定的话，试着丢掉一些东西”&lt;/i&gt;
是不久前看蔡康永听到的，是「背水一战」的一种温和的形式。刚听到这句话我就打开手机把浏览器书签里的超过100估计有200多以前都有点不想删的书签都删除，希望享受着这种丢弃带给我的坚定感，但却事与愿违。
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>nikola</category><guid>https://fpghwd.github.io/posts/nikola-first-time/</guid><pubDate>Fri, 22 May 2020 18:51:23 GMT</pubDate></item><item><title>blog-title</title><link>https://fpghwd.github.io/posts/blog-title/</link><dc:creator>suzumiya haruhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
Some content here
&lt;/p&gt;

&lt;p&gt;
Test &lt;b&gt;bolded&lt;/b&gt; test &lt;i&gt;italic text&lt;/i&gt; &lt;code&gt;verbatim.key[0].hello.value&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
This is &lt;span class="underline"&gt;underlined text&lt;/span&gt;.
&lt;/p&gt;

&lt;p&gt;
This is some code,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;console.log('object=', object);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
This is &lt;a href="http://www.google.com"&gt;google link&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Footnote1 &lt;sup&gt;&lt;a id="fnr.1" class="footref" href="https://fpghwd.github.io/posts/blog-title/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; and footnote2 &lt;sup&gt;&lt;a id="fnr.2" class="footref" href="https://fpghwd.github.io/posts/blog-title/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt; to explain something.
&lt;/p&gt;

&lt;div id="footnotes"&gt;
&lt;h3 class="footnotes"&gt;Footnotes: &lt;/h3&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="https://fpghwd.github.io/posts/blog-title/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
The link is: &lt;a href="http://orgmode.org"&gt;http://orgmode.org&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="https://fpghwd.github.io/posts/blog-title/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
Just another footnote
&lt;/p&gt;

&lt;pre class="example"&gt;
here is some example
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/blog-title/</guid><pubDate>Fri, 22 May 2020 18:47:42 GMT</pubDate></item><item><title>Welcome to Nikola</title><link>https://fpghwd.github.io/posts/welcome-to-nikola/</link><dc:creator>Roberto Alsina</dc:creator><description>&lt;div&gt;&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://farm1.staticflickr.com/138/352972944_4f9d568680_z.jpg?zz=1"&gt;&lt;img alt="Nikola Tesla Corner by nicwest, on Flickr" class="thumbnail" src="https://farm1.staticflickr.com/138/352972944_4f9d568680.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;If you can see this in a web browser, it means you managed to install Nikola,
and build a site using it. Congratulations!&lt;/p&gt;
&lt;p&gt;Next steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://fpghwd.github.io/pages/handbook/"&gt;Read the manual&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://getnikola.com"&gt;Visit the Nikola website to learn more&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://fpghwd.github.io/galleries/demo/"&gt;See a demo photo gallery&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://fpghwd.github.io/pages/listings-demo/"&gt;See a demo listing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://fpghwd.github.io/pages/dr-nikolas-vendetta/"&gt;See a demo of a longer text&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Send feedback to &lt;a class="reference external" href="mailto:info@getnikola.com"&gt;info@getnikola.com&lt;/a&gt;!&lt;/p&gt;&lt;/div&gt;</description><category>blog</category><category>demo</category><category>nikola</category><category>python</category><guid>https://fpghwd.github.io/posts/welcome-to-nikola/</guid><pubDate>Sat, 31 Mar 2012 02:00:00 GMT</pubDate></item></channel></rss>