<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dichotomy</title><link>https://fpghwd.github.io/</link><description>To iterate is human, to recurse, divine</description><atom:link href="https://fpghwd.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;suzumiya natsuhi&lt;/a&gt; </copyright><lastBuildDate>Sat, 26 Sep 2020 02:36:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Leetcode696. Count Binary Substrings</title><link>https://fpghwd.github.io/posts/leetcode696-count-binary-substrings/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/count-binary-substrings/"&gt;696. Count Binary Substrings&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    int countBinarySubstrings(string s) {
        if (s == "")
            return 0;
        vector&amp;lt;int&amp;gt; vi_pos;
        for (int i = 1; i &amp;lt; s.length(); i++) {
            if (s[i] != s[i - 1])
                vi_pos.push_back(i);
        }
        int count = 0, left, right;
        for (int i = 0; i &amp;lt; vi_pos.size(); i++) {
            left = vi_pos[i] - (i == 0 ? 0 : vi_pos[i - 1]);
            right = ((i == vi_pos.size() - 1) ? s.length() : vi_pos[i + 1]) -
                    vi_pos[i];
            count += min(left, right);
        }
        return count;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (90/90)

Runtime: 40 ms, faster than 99.85% of C++ submissions.

Memory Usage: 14.4 MB, less than 6.03% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
这道题我在 &lt;code&gt;right = ((i =&lt;/code&gt; vi&lt;sub&gt;pos.size&lt;/sub&gt;() - 1) ? s.length() : vi&lt;sub&gt;pos&lt;/sub&gt;[i + 1]) -
                    vi&lt;sub&gt;pos&lt;/sub&gt;[i];= 的时候把 &lt;code&gt;s.length()&lt;/code&gt; 写成了 &lt;code&gt;vi_pos.size()&lt;/code&gt; ，一直没有检查出来。后来代码拆开了几个变量用 gdb 调试出来了 right 值的问题。隐藏得太深了。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode696-count-binary-substrings/</guid><pubDate>Fri, 25 Sep 2020 18:34:20 GMT</pubDate></item><item><title>Leetcode687. Longest Univalue Path</title><link>https://fpghwd.github.io/posts/leetcode687-longest-univalue-path/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/longest-univalue-path/"&gt;687. Longest Univalue Path&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */

class Solution {
  public:
    int luvp = 0;
    int longestUnivaluePath(TreeNode *root) {
        if (root == nullptr)
            return 0;
        travelPath(root);
        return luvp - 1;
    }

    int travelPath(TreeNode *root) {
        int left = 0, right = 0;
        if (root-&amp;gt;left != nullptr)
            left = travelPath(root-&amp;gt;left);
        if (root-&amp;gt;right != nullptr)
            right = travelPath(root-&amp;gt;right);
        int left_tmp =
            ((root-&amp;gt;left &amp;amp;&amp;amp; root-&amp;gt;left-&amp;gt;val == root-&amp;gt;val) ? left : 0);
        int right_tmp =
            ((root-&amp;gt;right &amp;amp;&amp;amp; root-&amp;gt;right-&amp;gt;val == root-&amp;gt;val) ? right : 0);
        luvp = max(luvp, 1 + left_tmp + right_tmp);
        return 1 + max(left_tmp, right_tmp);
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (71/71)

Runtime: 184 ms, faster than 86.14% of C++ submissions.

Memory Usage: 72.6 MB, less than 5.21% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候没有做出来，觉得有点复杂。不过说到底还只是一个简单的树遍历，当然可以认为和求树深度的那类题其实差不多。其中每个点的处理就是找到是否比现有的最长路径 &lt;code&gt;luvp&lt;/code&gt; 更长的 &lt;code&gt;1 + left_tmp + right_tmp&lt;/code&gt; ，然后返回的若是 &lt;code&gt;1 + left_tmp + right_tmp&lt;/code&gt; ，那么得出来的结果不是 &lt;b&gt;最长的path&lt;/b&gt; ，而是相同值最多的相邻点个数。所以最后修改一下，返回稍长的路径即可。
&lt;/p&gt;

&lt;p&gt;
树的题，递归是最简洁的。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode687-longest-univalue-path/</guid><pubDate>Fri, 25 Sep 2020 05:21:48 GMT</pubDate></item><item><title>Leetcode599. Minimum Index Sum of Two Lists</title><link>https://fpghwd.github.io/posts/leetcode/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/minimum-index-sum-of-two-lists/"&gt;599. Minimum Index Sum of Two Lists&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    vector&amp;lt;string&amp;gt; findRestaurant(vector&amp;lt;string&amp;gt; &amp;amp;list1,
                                  vector&amp;lt;string&amp;gt; &amp;amp;list2) {
        unordered_map&amp;lt;string, int&amp;gt; umsi;
        for (int i = 0; i &amp;lt; list1.size(); i++) {
            umsi[list1[i]] = i;
        }

        int idx_sum = INT_MAX;
        vector&amp;lt;string&amp;gt; vsr;
        for (int i = 0; i &amp;lt; list2.size(); i++) {
            if (umsi.find(list2[i]) != umsi.end()) {
                if (idx_sum &amp;gt; i + umsi[list2[i]]) {
                    vsr.clear();
                    vsr.push_back(list2[i]);
                    idx_sum = i + umsi[list2[i]];
                } else if (idx_sum == i + umsi[list2[i]]) {
                    vsr.push_back(list2[i]);
                }
            }
        }

        return vsr;
    }
};


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (133/133)

Runtime: 104 ms, faster than 98.98% of C++ submissions.

Memory Usage: 36.9 MB, less than 63.53% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/leetcode/</guid><pubDate>Fri, 25 Sep 2020 01:06:43 GMT</pubDate></item><item><title>Leetcode617. Merge Two Binary Trees</title><link>https://fpghwd.github.io/posts/leetcode617-merge-two-binary-trees/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/merge-two-binary-trees/"&gt;617. Merge Two Binary Trees&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    TreeNode *mergeTrees(TreeNode *t1, TreeNode *t2) {
        if (t1 == NULL &amp;amp;&amp;amp; t2 == NULL)
            return NULL;
        TreeNode *t3 = new TreeNode((t1 == NULL ? 0 : t1-&amp;gt;val) +
                                    (t2 == NULL ? 0 : t2-&amp;gt;val));
        t3-&amp;gt;left = mergeTrees(t1 == NULL ? NULL : t1-&amp;gt;left,
                              t2 == NULL ? NULL : t2-&amp;gt;left);
        t3-&amp;gt;right = mergeTrees(t1 == NULL ? NULL : t1-&amp;gt;right,
                               t2 == NULL ? NULL : t2-&amp;gt;right);
        return t3;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (183/183)

Runtime: 56 ms, faster than 47.43% of C++ submissions.

Memory Usage: 35.7 MB, less than 5.05% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode617-merge-two-binary-trees/</guid><pubDate>Fri, 25 Sep 2020 00:54:22 GMT</pubDate></item><item><title>Leetcode668. Employee Importance</title><link>https://fpghwd.github.io/posts/leetcode668-employee-importance/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/employee-importance/"&gt;690. Employee Importance&lt;/a&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/*
// Definition for Employee.
class Employee {
public:
    int id;
    int importance;
    vector&amp;lt;int&amp;gt; subordinates;
};
*/

class Solution {
  public:
    int getImportance(vector&amp;lt;Employee *&amp;gt; employees, int id) {

        unordered_map&amp;lt;int, Employee *&amp;gt; umii;
        for (Employee *e : employees) {
            umii[e-&amp;gt;id] = e;
        }

        int importance = 0;
        queue&amp;lt;int&amp;gt; qi;
        qi.push(id);

        int tmp;
        while (!qi.empty()) {
            tmp = qi.front();
            importance += umii[tmp]-&amp;gt;importance;
            qi.pop();
            for (int i : umii[tmp]-&amp;gt;subordinates)
                qi.push(i);
        }

        return importance;
    }
};


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (108/108)

Runtime: 36 ms, faster than 92.63% of C++ submissions.

Memory Usage: 14.4 MB, less than 27.87% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode668-employee-importance/</guid><pubDate>Fri, 25 Sep 2020 00:15:02 GMT</pubDate></item><item><title>Leetcode649  Second Minimum Node In a Binary Tree</title><link>https://fpghwd.github.io/posts/leetcode649-second-minimum-node-in-a-binary-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/"&gt;671. Second Minimum Node In a Binary Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    int fm = -1, sm = -1;
    int findSecondMinimumValue(TreeNode *root) {
        if (root == NULL)
            return sm;

        if (fm == -1)
            fm = root-&amp;gt;val;
        else {
            if (sm == -1) {
                if (root-&amp;gt;val &amp;gt; fm)
                    sm = root-&amp;gt;val;
                else if (root-&amp;gt;val &amp;lt; fm) {
                    sm = fm;
                    fm = root-&amp;gt;val;
                } else {
                    // do nothing
                }
            } else {
                if (root-&amp;gt;val &amp;gt; sm) {
                    // do noting
                } else if (root-&amp;gt;val &amp;lt; fm) {
                    sm = fm;
                    fm = root-&amp;gt;val;
                } else if (root-&amp;gt;val == sm || root-&amp;gt;val == fm) {
                    // do nothing
                } else { // root-&amp;gt;val &amp;gt; fm and root-&amp;gt;val &amp;lt; sm;
                    sm = root-&amp;gt;val;
                }
            }
        }

        findSecondMinimumValue(root-&amp;gt;left);
        findSecondMinimumValue(root-&amp;gt;right);

        return sm;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (35/35)

Runtime: 0 ms, faster than 100.00% of C++ submissions.

Memory Usage: 7.2 MB, less than 17.00% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
自从学会了一种偷懒的写法之后，就一直用这种 travel 的方法。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode649-second-minimum-node-in-a-binary-tree/</guid><pubDate>Thu, 24 Sep 2020 23:44:24 GMT</pubDate></item><item><title>Leetcode804 Most Common Word</title><link>https://fpghwd.github.io/posts/leetcode804-most-common-word/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/most-common-word/"&gt;819. Most Common Word&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    string mostCommonWord(string paragraph, vector&amp;lt;string&amp;gt; &amp;amp;banned) {
        unordered_map&amp;lt;string, int&amp;gt; umsi;
        int start, end;
        transform(paragraph.begin(),paragraph.end(),paragraph.begin(),::tolower);
        for (int i = 0; i &amp;lt; paragraph.length(); i++) {
            while (i &amp;lt; paragraph.length() &amp;amp;&amp;amp; !isalpha(paragraph[i]))
                i++;
            start = i;
            while (i &amp;lt; paragraph.length() &amp;amp;&amp;amp; isalpha(paragraph[i]))
                i++;
            end = i;
            umsi[paragraph.substr(start, end - start)]++;
        }

        for (string s : banned)
            if (umsi.find(s) != umsi.end())
                umsi.erase(s);

        string w = "";
        for (auto it : umsi) {
            if (w == "")
                w = it.first;
            else if (umsi[it.first] &amp;gt; umsi[w])
                w = it.first;
        }

        return w;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (47/47)

Runtime: 4 ms, faster than 99.63% of C++ submissions.

Memory Usage: 7.8 MB, less than 87.14% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode804-most-common-word/</guid><pubDate>Thu, 24 Sep 2020 22:56:27 GMT</pubDate></item><item><title>调试的时候出了一个问题</title><link>https://fpghwd.github.io/posts/diao-shi-de-shi-hou-chu-le-yi-ge-wen-ti/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/shortest-distance-to-a-character/"&gt;821. Shortest Distance to a Character&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
一个 gdb 调试的问题，没太看明白（暴哭）：
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200925_132117screenshot.png" alt="_20200925_132117screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
想到可能是类型的问题： &lt;code&gt;size_type&lt;/code&gt; 是一个无符号的整数， &lt;code&gt;int&lt;/code&gt; 是有符号整数，有符号整数首先转换成无符号整数。 &lt;code&gt;-1&lt;/code&gt; 转化成 &lt;code&gt;0xffffffff&lt;/code&gt; ，所以应该是没有问题的。
&lt;/p&gt;

&lt;p&gt;
同时有一个问题：转化时为什么是有符号整数转换成无符号整数，而不是相反呢？
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>leetcode</category><guid>https://fpghwd.github.io/posts/diao-shi-de-shi-hou-chu-le-yi-ge-wen-ti/</guid><pubDate>Thu, 24 Sep 2020 21:22:42 GMT</pubDate></item><item><title>Leetcode107 Binary Tree Level Order Traversal II</title><link>https://fpghwd.github.io/posts/leetcode107-binary-tree-level-order-traversal-ii/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/"&gt;107. Binary Tree Level Order Traversal II&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; levelOrderBottom(TreeNode *root) {
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result;

        queue&amp;lt;TreeNode *&amp;gt; q;
        TreeNode *last, *end;
        if (root) {
            q.push(root);
            end = root;
            last = end;
            result.push_back(vector&amp;lt;int&amp;gt;{});
        }
        while (!q.empty()) {
            TreeNode *temp = q.front();
            result[result.size() - 1].push_back(temp-&amp;gt;val);
            q.pop();
            if (temp-&amp;gt;left)q.push(temp-&amp;gt;left);
            if (temp-&amp;gt;right)q.push(temp-&amp;gt;right);
            if (temp == last &amp;amp;&amp;amp; !q.empty())result.push_back(vector&amp;lt;int&amp;gt;{}); // 达到一层结尾还有元素就增加一个空 vector
            if (temp == last)last=q.back();
        }
        reverse(result.begin(), result.end());
        return result;
    }
};


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
二叉树的层序遍历，稍微修改一下就行。
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (34/34)

Runtime: 4 ms, faster than 91.99% of C++ submissions.

Memory Usage: 12.5 MB, less than 97.56% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode107-binary-tree-level-order-traversal-ii/</guid><pubDate>Thu, 24 Sep 2020 20:07:52 GMT</pubDate></item><item><title>Leetcode108 Convert Sorted Array to Binary Search Tree</title><link>https://fpghwd.github.io/posts/leetcode108-convert-sorted-array-to-binary-search-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"&gt;108. Convert Sorted Array to Binary Search Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    TreeNode *sortedArrayToBST(vector&amp;lt;int&amp;gt; &amp;amp;nums) {
        // create tree
        return toHeightBST(nums, 0, nums.size() - 1);
    }

    TreeNode *toHeightBST(vector&amp;lt;int&amp;gt; &amp;amp;nums, int l, int r) {
        if (l &amp;gt; r)
            return NULL;
        int mid = l + (r - l) / 2;
        TreeNode *root = new TreeNode(nums[mid]);
        root-&amp;gt;left = toHeightBST(nums, l, mid - 1);
        root-&amp;gt;right = toHeightBST(nums, mid + 1, r);
        return root;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
一开始以为是树的高度的调整题，后来发现这个和 &lt;b&gt;用数组表示的树构造一棵树&lt;/b&gt; 的做法差不多。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode108-convert-sorted-array-to-binary-search-tree/</guid><pubDate>Thu, 24 Sep 2020 19:35:49 GMT</pubDate></item></channel></rss>