<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dichotomy</title><link>https://fpghwd.github.io/</link><description>To iterate is human, to recurse, divine</description><atom:link href="https://fpghwd.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;suzumiya natsuhi&lt;/a&gt; </copyright><lastBuildDate>Thu, 24 Sep 2020 12:38:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Leetcode937 Reorder Data in Log Files</title><link>https://fpghwd.github.io/posts/leetcode937-reorder-data-in-log-files/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/reorder-data-in-log-files/"&gt;937. Reorder Data in Log Files&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        vector&amp;lt;string&amp;gt; reorderLogFiles(vector&amp;lt;string&amp;gt; &amp;amp;logs) {
            stable_sort(begin(logs), end(logs), [](auto &amp;amp;a, auto &amp;amp;b) {
                auto A = 1 + a.find(' '), B = 1 + b.find(' ');
                return a[A] &amp;gt; '@' &amp;amp;&amp;amp;
                    (b[B] &amp;lt; '@' ||
                     a.substr(A).append(a, 0, A) &amp;lt; b.substr(B).append(b, 0, B));
            });
            return logs;
        }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
先找到 identifier 和后面部分的分隔点 A 和 B ，然后用 ’@’ 作为判断后面是数字还是字母的基准。ASCII 码表中， &lt;code&gt;'0'&lt;/code&gt; 和 &lt;code&gt;'9'&lt;/code&gt; 分别是 48 和 57 ， &lt;code&gt;'@'&lt;/code&gt; 是 64 ， &lt;code&gt;'a'&lt;/code&gt; 和 &lt;code&gt;'z'&lt;/code&gt; 分别是 97 和 122 。
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;return&lt;/code&gt; 后的部分同时保证了当 letter-logs 排在 digit-logs 的前面；如果后部分（数字或者字母）拼接 identifier 后用字典序排列，也即后部分如果恰好相同时， identifier dominating。
&lt;/p&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/leetcode937-reorder-data-in-log-files/</guid><pubDate>Thu, 24 Sep 2020 04:31:36 GMT</pubDate></item><item><title>Replace v2ray config outbounds with vmess</title><link>https://fpghwd.github.io/posts/replace-outbound-in-vmess-urlgfw-with-your-down-v2ray-config-file/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
v2ray on linux
&lt;/p&gt;

&lt;p&gt;
v2ray 在 linux 平台上&lt;a href="https://github.com/v2ray/v2ray-core/issues/1517"&gt;并不也不计划&lt;/a&gt;支持将 vmess-url 转换成可用的 v2ray 配置文件（我猜考虑到这些有端口和系统代理设置而在 linux 平台上这些是单独的功能）。也有人使用 python 脚本转换，&lt;a href="https://github.com/boypt/vmess2json"&gt;代码&lt;/a&gt;没有仔细看。不过我想到自己已经有在使用的配置文件，即使转化 vmess url 也不能完全用，有用的部分是 outbounds （即出口部分，提供 v2ray 服务的主机相关），所以打断取出 vmess url 的 outbound 部分合并到现有的 &lt;i&gt;/etc/v2ray/config.json&lt;/i&gt; 中使用。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
目标
&lt;/p&gt;

&lt;p&gt;
目标是将 vmess-url 转换成可用的 v2ray 配置文件，然后抽取其中的 outbounds[0] 替换原有 v2ray 配置文件的 outbounds[0] 部分。因为原有文件设置的路由还有 inbounds 已经有而且不打算更改这部分内容。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
vmess urls
&lt;/p&gt;

&lt;p&gt;
将可得的所有的 vmess urls 存入一个文件 &lt;code&gt;vmess-url.info&lt;/code&gt; 。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
命令行 json 操作
&lt;/p&gt;

&lt;p&gt;
安装 v2ray-tools 工具: &lt;code&gt;npm -g install v2ray-tools&lt;/code&gt; 。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
转换 shell 脚本
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-shell"&gt;
    vmess_file_path=$1      # vmdss-url.info 路径
    line_num=$2             # 使用的 vmess-url 行号
    config_file_path=$3     # 待合并的原配置。一般是 /etc/v2ray/config.json
    output_config_file_path=$4  # 合并后的 config.json

    line=`sed -n $(line_num)p $vmess_file_path`                         # 获取 vmess-url
    result=`v2ray-tools vmess2config --port 8080 --url $line`           # 利用 v2ray-tools 生成配置文件
    outbound0=`echo $result | jq '.outbounds[0]'`                       # 获取生成配置文件的 outbounds[0] 部分
    config=`cat "/etc/v2ray/config.json"`                               # 获取原配置
    replace_config=`echo $config | jq -r ".outbounds[0]=$outbound0"`    # 替换原配置的 outbounds[0] 为 vmess-url 的 outbounds[0]
    echo '$replace_config' &amp;gt; $output_config_file_path                   # 写出文件，也可以直接写入 /etc/v2ray/config.json 需要 root 权限

    # usage: vmess-url-to-config-json.sh ~/vmess-url.info 2 /etc/config/config.json ~/config.json

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
这样就得到了 config.json 文件，然后可用 v2ray 检查： &lt;code&gt;v2ray -test -config ~/config.json&lt;/code&gt; 。可替换系统的默认配置文件 &lt;code&gt;/etc/v2ray/config.json&lt;/code&gt; ，并重启服务 &lt;code&gt;sudo systemctl restart v2ray.service&lt;/code&gt; 。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>openSUSE</category><guid>https://fpghwd.github.io/posts/replace-outbound-in-vmess-urlgfw-with-your-down-v2ray-config-file/</guid><pubDate>Fri, 18 Sep 2020 00:36:18 GMT</pubDate></item><item><title>Org2nikola image displaying</title><link>https://fpghwd.github.io/posts/org2nikola-image-display/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;b&gt;设置&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
先&lt;a href="https://github.com/redguardtoo/org2nikola/issues/11"&gt;咨询&lt;/a&gt;了作者，然后得到了思路：获得一个对 output html 进行自定义 render 的函数，然后自定义修改 html 。
&lt;/p&gt;

&lt;p&gt;
设置 org2nikola 包变量的 &lt;code&gt;org2nikola-process-output-html-function&lt;/code&gt; 为：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(setq org2nikola-process-output-html-function
 (lambda (html-text title post-slug)
   (progn (let* ((re-str "\\/home\\/.+?\\.\\(png\\|jpg\\|jpeg\\|bmp\\)"))
            (let* ((files-list (s-match-strings-all re-str html-text)))
              (dolist (file-path files-list)
                (message (format "file-path: %s" (car file-path)))
                (setq cmd (format "cp %s /home/wd/.config/nikola/images/" (car file-path)))
                (message cmd)
                (shell-command cmd))))
          (replace-regexp-in-string
           "file:.+?\\/[a-z0-9-]\\{34\\}\\/"
           "https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/"
           html-text))))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
其中用到了 &lt;code&gt;s-match-strings-all&lt;/code&gt; 和 &lt;code&gt;replace-regexp-in-string&lt;/code&gt; 两个函数。
&lt;/p&gt;

&lt;p&gt;
整个过程中最重要的还是匹配文件地址和修改 github 图片资源 url 的两个正则表达式。我需要匹配字符串的是（目前只能匹配一个字符串，如果贴文本的话，写好博客后进行处理后面的真正图片的链接就不能进行转换了，所以用图片代替）：
&lt;code&gt;找不到图片了算了)○(￣□￣○)&lt;/code&gt; 。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;获取图片地址&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
我需要将图片的地址拿到并复制到 nikola/images 目录，这样 nikola 在发布的时候会对图片做一些处理，然后输出到 output/images 中。使用的正则是 &lt;code&gt;\\/home\\/.+?\\.\\(png\\|jpg\\|jpeg\\|bmp\\)&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200918_123005screenshot.png" alt="_20200918_123005screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;替换图片地址&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
我需要将形如 &lt;code&gt;file:///home/wd/Dropbox/text/org/.attach/(HashI/(UUID)/&lt;/code&gt; 的所有字符串替换为 &lt;code&gt;https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/&lt;/code&gt; ，使用的正则是 &lt;code&gt;"file:.+?\\/[a-z0-9-]\\{34\\}\\/&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20200918_122914screenshot.png" alt="_20200918_122914screenshot.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;调试正则&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
用到了 emacs 自带的 &lt;code&gt;re-builder&lt;/code&gt; 来对当前 buffer 测试正则表达式，很好用。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;TODO&lt;/b&gt;
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;由于没有循环，只能找到第一个图片的字符串然后替换成真实的 url, 需要完善匹配后的操作。（完成）&lt;/li&gt;
&lt;li&gt;还只能匹配截图这样文件名的图片，需要完善正则表达式。（完成）&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>ATTACH</category><category>emacs</category><guid>https://fpghwd.github.io/posts/org2nikola-image-display/</guid><pubDate>Wed, 16 Sep 2020 19:35:39 GMT</pubDate></item><item><title>Leetcode700 Flood Fill</title><link>https://fpghwd.github.io/posts/leetcode700-flood-fill/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近做了这道题（&lt;a href="https://leetcode.com/problems/flood-fill/"&gt;733. Flood Fill&lt;/a&gt;）无法提交，用了 gdb 调试可能因为 image 的 size 有点小所以也没有问题。
&lt;/p&gt;

&lt;p&gt;
但是提交到 leetcode 的时候就提示：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;Status: Runtime Error

AddressSanitizer:DEADLYSIGNAL
=================================================================
==33==ERROR: AddressSanitizer: stack-overflow on address 0x7ffe804b8fc0 (pc 0x000000383a89 bp 0x7ffe804b9190 sp 0x7ffe804b8fc0 T0)
==33==ABORTING
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Incomplete Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; floodFill(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;image, int sr, int sc,
                                      int newColor) {
            int tmp_color = image[sr][sc];
            if (tmp_color == newColor)
                return image;

            // paint
            if (image[sr][sc] != 0)
                image[sr][sc] = newColor;

            // paint others
            if (sr - 1 &amp;gt;= 0 &amp;amp;&amp;amp; tmp_color == image[sr - 1][sc])
                floodFill(image, sr - 1, sc, newColor);
            if (sr + 1 &amp;lt; image.size() &amp;amp;&amp;amp; tmp_color == image[sr + 1][sc])
                floodFill(image, sr + 1, sc, newColor);
            if (sc - 1 &amp;gt;= 0 &amp;amp;&amp;amp; tmp_color == image[sr][sc - 1])
                floodFill(image, sr, sc - 1, newColor);
            if (sc + 1 &amp;lt; image[0].size() &amp;amp;&amp;amp; tmp_color == image[sr][sc + 1])
                floodFill(image, sr, sc + 1, newColor);

            return image;
        }

};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
并不知道哪里出了问题，先记下来再说。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode700-flood-fill/</guid><pubDate>Wed, 16 Sep 2020 17:13:28 GMT</pubDate></item><item><title>Leetcode606 Construct String from Binary Tree</title><link>https://fpghwd.github.io/posts/leetcode606-construct-string-from-binary-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/construct-string-from-binary-tree/"&gt;606. Construct String from Binary Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    public:
        string tree2str(TreeNode* t) {
            if(t == nullptr)return result;
            result.append(to_string(t-&amp;gt;val));
            if(t-&amp;gt;left){
                result.append(1,'(');
                tree2str(t-&amp;gt;left);
                result.append(1,')');
            }else{
                if(t-&amp;gt;right){
                    result.append("()");
                }
            }
            if(t-&amp;gt;right){
                result.append(1,'(');
                tree2str(t-&amp;gt;right);
                result.append(1,')');
            }
            return result;
        }
    private:
        string result;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Leetcode result&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (162/162)

Runtime: 56 ms, faster than 20.91% of C++ submissions.

Memory Usage: 144.4 MB, less than 6.22% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
结果排倒数 ，以及显示不了:)这个emoji。&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode606-construct-string-from-binary-tree/</guid><pubDate>Tue, 15 Sep 2020 20:23:51 GMT</pubDate></item><item><title>Leetcode487 Next Greater Element I</title><link>https://fpghwd.github.io/posts/leetcode487-next-greater-element-i/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/next-greater-element-i/"&gt;487. Next Greater Element I&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;unordered_map&amp;gt;
#include &amp;lt;stack&amp;gt;

using namespace std;

class Solution {
public:
    vector&amp;lt;int&amp;gt; nextGreaterElement(vector&amp;lt;int&amp;gt;&amp;amp; nums1, vector&amp;lt;int&amp;gt;&amp;amp; nums2) {
        unordered_map&amp;lt;int, int&amp;gt; mp;
        stack&amp;lt;int&amp;gt; s;
        for(int num : nums2){
            while(!s.empty() and s.top()&amp;lt;num)
                mp[s.top()] = num, s.pop(); // , trick
            s.push(num);
        }

        for(int &amp;amp;num : nums1)
            num = (mp.find(num) == mp.end()) ? -1 : mp[num];

        return nums1;
    }
};

// Input: nums1 = [2,4], nums2 = [1,2,3,4].

int main(int arch, char **argv){

    vector&amp;lt;int&amp;gt; nums1 = {2,4}, nums2 = {1,2,3,4};
    auto solution = new Solution();
    solution-&amp;gt;nextGreaterElement(nums1, nums2);

    return 0;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
开始没有看太懂题目的意思，解答也看不懂。后来在 gud-gdb 下调试了一下，才懂了一点点。Map 的作用是存 nums2 中每个 element 的后面第一个比自身大的 element, stack 的作用是暂存正在处理的位置吧（没有想出来如何更好的表达）。num1 是 nums2 的字集，那么再遍历一遍 map 就可以得到 nums1 中每个元素的在 nums2 的位置上后面的第一个比它大的元素了。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode487-next-greater-element-i/</guid><pubDate>Mon, 14 Sep 2020 18:51:50 GMT</pubDate></item><item><title>Leetcode589 N-ary Tree Preorder Traversal</title><link>https://fpghwd.github.io/posts/leetcode742-n-ary-tree-preorder-traversal/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/n-ary-tree-preorder-traversal"&gt;589. N-ary Tree Preorder Traversal&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        vector&amp;lt;int&amp;gt; preorder(Node* root) {
            if(root==nullptr)return preorder_vi;
            preorder_vi.push_back(root-&amp;gt;val);
            for(Node* n:root-&amp;gt;children){
                preorder(n);
            }
            return preorder_vi;
        }
    private:
        vector&amp;lt;int&amp;gt; preorder_vi;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
虽然这个返回有点丑陋，不想写第二个函数，尽管感觉总是怪怪的。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;更新：&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
奇怪主要因为这个 &lt;code&gt;preorder_vi&lt;/code&gt; 的返回看起来有点多余，可能以前习惯写的遍历都是返回 &lt;code&gt;void&lt;/code&gt; ，导致有这样的错觉。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode742-n-ary-tree-preorder-traversal/</guid><pubDate>Mon, 14 Sep 2020 04:09:43 GMT</pubDate></item><item><title>Leetcode893 IncreasingOrderSearch Tree</title><link>https://fpghwd.github.io/posts/leetcode893-increasingordersearch-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/increasing-order-search-tree/"&gt;893. IncreasingOrderSearch Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
    public:
        TreeNode* increasingBST(TreeNode* root) {
            if(root == nullptr)return nullptr;
            TreeNode *first = root, *last = root;
            inOrderRecursion(root, first, last);
            return first;
        }

       void inOrderRecursion(TreeNode* root,TreeNode*&amp;amp; first, TreeNode*&amp;amp; last){

           if(root == nullptr)return;
           TreeNode *first1, *last1;

           if(root-&amp;gt;left){
               last1 = root-&amp;gt;left;
               first = root-&amp;gt;left;
               inOrderRecursion(root-&amp;gt;left, first, last1);
               last1-&amp;gt;left = nullptr; last1-&amp;gt;right=root;
           }
           if(root-&amp;gt;right){
               first1 = root-&amp;gt;right;
               last = root-&amp;gt;right;
               inOrderRecursion(root-&amp;gt;right,first1,last);
               root-&amp;gt;left = nullptr; root-&amp;gt;right = first1;
           }
        }

};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode893-increasingordersearch-tree/</guid><pubDate>Sun, 13 Sep 2020 01:10:47 GMT</pubDate></item><item><title>Leetcode1200 minimum absolute difference</title><link>https://fpghwd.github.io/posts/leetcode1200-minimum-absolute-difference/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/minimum-absolute-difference/"&gt;1200. Minimum Absolute Difference&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;class Solution {
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; minimumAbsDifference(vector&amp;lt;int&amp;gt;&amp;amp; arr) {
        sort(arr.begin(), arr.end());
        int v = -1;
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; mad;
        for(int i = 0; i + 1 &amp;lt; arr.size(); i++){
            vector&amp;lt;int&amp;gt; tmp;
            if( v == -1 || arr[i+1] - arr[i] &amp;lt; v){
                mad.clear();
                mad.push_back(vector&amp;lt;int&amp;gt;{arr[i],arr[i+1]});
                v = arr[i+1] - arr[i];
            }else{
                if(arr[i+1] - arr[i] == v){
                    mad.push_back(vector&amp;lt;int&amp;gt;{arr[i],arr[i+1]});
                }
            }
        }
        return mad;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode1200-minimum-absolute-difference/</guid><pubDate>Fri, 11 Sep 2020 19:43:01 GMT</pubDate></item><item><title>Ignorant and tolerant</title><link>https://fpghwd.github.io/posts/ignorant-and-tolerant/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
如果把宽容理解成行为的话，那么有两个和这种行为相关的 无知相关的宽容 和 尊重相关的宽容。
&lt;/p&gt;

&lt;p&gt;
其实两者在大多数情况看来并没有区别，两者形成在表面上相通的宽容行为。假设一种情况：有人请我喝酒，我说不喝，而请我啤酒的人只是说 “好吧”，她也没有打扰我，甚至没有问我，我怎么能确定她尊重我的选择呢？如果不知道的话，那谈论这两点又有什么意义呢？
&lt;/p&gt;

&lt;p&gt;
尊重相关的宽容往往是这样的：我们尊重别人的价值和独特性，因为我们理解并有意识地意识到这是他们的独特之处。而另一方面：无知是一种不打扰他人行为的行为，因为我们不关心，甚至更麻烦。
&lt;/p&gt;

&lt;p&gt;
尊重的宽容鼓励沟通和相互理解，而无知的宽容则会引发假设和判断。
&lt;/p&gt;

&lt;p&gt;
&lt;del&gt;表面上看来，无知的宽容像是 “不知者不罪”；但很多场合下，“雪崩下每一片雪花都有在助力”。&lt;/del&gt; 在危机时，尤其是当我们的自我受到干扰的时候，我们自己对生活的看法就会受到挑战。那么，所有与他人不一样的生命价值的差异，都会莫名其妙地浮现出来，变得清晰可见。在这种情况下，无知（的宽容）将导致我们更加判断。在更糟的环境下，他们的价值会被我们忽视和虐待。同时，尊重的宽容会使我们仍然给予尊重，而不是刻板地认为那些有同样价值的人也可以做同样的事情。在喝酒的例子中，很可能是这样：给我饮料的人认定了我的拒绝，并 &lt;b&gt;判断&lt;/b&gt; 我有点认真/不好玩，或者可能不尊重人。
&lt;/p&gt;

&lt;p&gt;
信息越闭塞下的宽容，很可能是无知的宽容；而信息闭塞情况下仍保持尊重的宽容的人，难能可贵。
&lt;/p&gt;

&lt;p&gt;
所以真正值得发展的宽容应该是尊重相关的宽容。
&lt;/p&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/ignorant-and-tolerant/</guid><pubDate>Tue, 08 Sep 2020 18:06:30 GMT</pubDate></item></channel></rss>