<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dichotomy</title><link>https://fpghwd.github.io/</link><description>To iterate is human, to recurse, divine</description><atom:link href="https://fpghwd.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ggwdwhu@gmail.com"&gt;suzumiya natsuhi&lt;/a&gt; </copyright><lastBuildDate>Fri, 16 Oct 2020 11:32:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Org archive location</title><link>https://fpghwd.github.io/posts/org-archive-location/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
最近在使用 org 的时候想把 org-archive-subtree 的条目和 org-capture-templates 那样，将每次当天 archived 的 headline 放到当日的日期 headline 下面，和日记一样组织。这样的话，将来查询的时候就可以顺便看一下当天发生的事情和当天完成的项目了。
&lt;/p&gt;

&lt;p&gt;
这个是日记的组织方式：
&lt;img src="https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/_20201016_192526screenshot.png" alt="_20201016_192526screenshot.png"&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(add-to-list 'org-capture-templates
                      '("zj" "journal" entry (file "/home/wd/dropbox/to-encfs/text/org/journal.org")
                        "* %u - %^{heading}\n  %?"))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
同时在 &lt;code&gt;customize org-archive-location&lt;/code&gt; 中发现了有这种设定：
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
"~/org/datetree.org::datetree/* Finished Tasks"
The "datetree/" string is special, signifying to archive
items to the datetree.  Items are placed in either the CLOSED
date of the item, or the current date if there is no CLOSED date.
The heading will be a subentry to the current date.  There doesn’t
need to be a heading, but there always needs to be a slash after
datetree.  For example, to store archived items directly in the
datetree, use "~/org/datetree.org::datetree/".

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
只需要每年修改一次文件即可。
&lt;/p&gt;&lt;/div&gt;</description><category>ATTACH</category><category>emacs</category><guid>https://fpghwd.github.io/posts/org-archive-location/</guid><pubDate>Fri, 16 Oct 2020 03:32:18 GMT</pubDate></item><item><title>Leetcode92. Reverse Linked List II</title><link>https://fpghwd.github.io/posts/leetcode92-reverse-linked-list-ii/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/reverse-linked-list-ii/"&gt;92. Reverse Linked List II&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
  public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        if (m == n) // 当 m = n 时并没有变化
            return head;

        int i = 1;
        ListNode *psuedo_head = new ListNode(), *pre = psuedo_head, *n_pre;

        for (ListNode *w = head; w;) {
            if (i &amp;lt;= m || i &amp;gt; n) {
                if (i == m)
                    n_pre = w;
                pre-&amp;gt;next = w;
                if (i != m)
                    pre = w;
                w = w-&amp;gt;next;
            } else if (i &amp;gt; m &amp;amp;&amp;amp; i &amp;lt;= n) {
                ListNode *tmp = w;
                w = w-&amp;gt;next;
                tmp-&amp;gt;next = pre-&amp;gt;next;
                pre-&amp;gt;next = tmp;
                if (i == n)
                    pre = n_pre;
            }
            i++;
        }

        pre-&amp;gt;next = nullptr; // 尾节点后续是 null

        return psuedo_head-&amp;gt;next;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (44/44)

Runtime: 4 ms, faster than 64.43% of C++ submissions.

Memory Usage: 7.8 MB, less than 16.96% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候没想那么多，暴力的做法。后来做的时候就想到这是将链表的导致的前插和尾插组合在一起的题。并不难，只要分别搞清楚这两种写法就能写出来。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode92-reverse-linked-list-ii/</guid><pubDate>Mon, 05 Oct 2020 02:04:08 GMT</pubDate></item><item><title>Leetcode96. Unique Binary Search Trees</title><link>https://fpghwd.github.io/posts/leetcode96-unique-binary-search-trees/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/unique-binary-search-trees/"&gt;96. Unique Binary Search Trees&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;class Solution {
  public:
    int numTrees(int n) {
        if (n == 0 || n == 1)return 1;

        int count = 0;
        for (int i = 1; i &amp;lt;= n; i++)count += numTrees(i - 1) * numTrees(n - i);

        return count;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (19/19)

Runtime: 1220 ms, faster than 11.92% of C++ submissions.

Memory Usage: 6 MB, less than 59.10% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
用 DP 做更快一点，但递归对理解更友好些。反过来， DP 不就是递归的递推公式的代数形式嘛。能用递归就做出来的事情，就不需要迭代了，毕竟&lt;a href="http://algosaur.us/recursion/"&gt;“To iterate is human, to recurse, divine”&lt;/a&gt;. 能请神去做的事情，就不要麻烦人啦。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode96-unique-binary-search-trees/</guid><pubDate>Wed, 30 Sep 2020 20:39:40 GMT</pubDate></item><item><title>Leetcode824. Goat Latin</title><link>https://fpghwd.github.io/posts/leetcode824-goat-latin/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/goat-latin/"&gt;824. Goat Latin&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    string toGoatLatin(string S) {
        int start = 0, end = 0, i = 1;
        string goat = "";
        while (start &amp;lt; S.length()) {
            if (i != 1)
                goat += " ";
            while (end &amp;lt; S.length() &amp;amp;&amp;amp; isalpha(S[end]))
                end++;
            if (S[start] == 'a' || S[start] == 'e' || S[start] == 'i' ||
                S[start] == 'o' || S[start] == 'u' || S[start] == 'A' ||
                S[start] == 'E' || S[start] == 'I' || S[start] == 'O' ||
                S[start] == 'U') {
                goat += S.substr(start, end - start);
            } else {
                if (start + 1 != end) {
                    goat += S.substr(start + 1, end - start - 1);
                }
                goat += S.substr(start, 1);
            }
            goat += "ma";
            goat += string(i, 'a');

            end++, start = end, i++;
        }
        return goat;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (99/99)

Runtime: 0 ms, faster than 100.00% of C++ submissions.

Memory Usage: 6.6 MB, less than 76.77% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
字符串的題目都是用指針來做的。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode824-goat-latin/</guid><pubDate>Tue, 29 Sep 2020 02:01:13 GMT</pubDate></item><item><title>Leetcode572. Subtree of Another Tree</title><link>https://fpghwd.github.io/posts/leetcode572-subtree-of-another-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/subtree-of-another-tree/"&gt;572. Subtree of Another Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    bool isSubtree(TreeNode *s, TreeNode *t) {
        // return isSameTree(s, t) || isSameTree(s-&amp;gt;left, t) ||
        //        isSameTree(s-&amp;gt;right, t);
        if (s == NULL &amp;amp;&amp;amp; t == NULL)
            return true;
        if (s == NULL)
            return false;
        if (t == NULL)
            return true;
        bool isSub;
        if (s-&amp;gt;val == t-&amp;gt;val)
            isSub = isSameTree(s, t);
        if (isSub)
            return true;
        return isSubtree(s-&amp;gt;left, t) || isSubtree(s-&amp;gt;right, t);
    }

    bool isSameTree(TreeNode *s, TreeNode *t) {
        if (s == nullptr &amp;amp;&amp;amp; t == nullptr) {
            return true;
        } else {
            if (s == nullptr || t == nullptr)
                return false;
            if (s-&amp;gt;val != t-&amp;gt;val)
                return false;
            else
                return isSameTree(s-&amp;gt;left, t-&amp;gt;left) &amp;amp;&amp;amp;
                       isSameTree(s-&amp;gt;right, t-&amp;gt;right);
        }
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (183/183)

Runtime: 40 ms, faster than 66.02% of C++ submissions.

Memory Usage: 29.7 MB, less than 18.21% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候并没有做对，第二次倒是 AC 了。没啥感觉，就是感觉自己的方法代码有点复杂。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode572-subtree-of-another-tree/</guid><pubDate>Tue, 29 Sep 2020 00:20:04 GMT</pubDate></item><item><title>Leetcode093. Restore IP Addresses</title><link>https://fpghwd.github.io/posts/leetcode093-restore-ip-addresses/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/restore-ip-addresses/"&gt;93. Restore IP Addresses&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    vector&amp;lt;string&amp;gt; addresses;
    vector&amp;lt;string&amp;gt; restoreIpAddresses(string s) {
        vector&amp;lt;string&amp;gt; path;
        dfs(s, path);
        return addresses;
    }

    void dfs(string s, vector&amp;lt;string&amp;gt; &amp;amp;path) {

        if (s == "" &amp;amp;&amp;amp; path.size() == 4) {
            string tmp = "";
            for (string s : path) {
                if (tmp != "")
                    tmp += ".";
                tmp += s;
            }
            addresses.push_back(tmp);
            return;
        }

        if (path.size() &amp;gt; 4 || s == "")
            return;

        for (int i = 1; i &amp;lt;= s.length(); i++) {
            string ip = s.substr(0, i);
            if (i &amp;gt; 1 &amp;amp;&amp;amp; s[0] == '0')
                return;
            if (stoi(ip) &amp;gt; 255)
                break;
            path.push_back(ip);
            dfs(s.substr(i, s.length() - i), path);
            path.pop_back();
        }
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (147/147)

Runtime: 4 ms, faster than 81.89% of C++ submissions.

Memory Usage: 7.6 MB, less than 13.80% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次嘗試是忽略了 10.0.010.0 中的 010 是不能作爲一個符合要求的 ip 段。所以添加了
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;if (i &amp;gt; 1 &amp;amp;&amp;amp; s[0] == '0')
    return;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
這一段，雖然丑但是很有用。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode093-restore-ip-addresses/</guid><pubDate>Mon, 28 Sep 2020 07:12:03 GMT</pubDate></item><item><title>Leetcode543. Diameter of Binary Tree</title><link>https://fpghwd.github.io/posts/leetcode528-diameter-of-binary-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/diameter-of-binary-tree/"&gt;543. Diameter of Binary Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    int diameter = 0;
    int diameterOfBinaryTree(TreeNode *root) {
        depthTravel(root);
        return diameter;
    }
    int depthTravel(TreeNode *root) {
        if (root == nullptr)
            return 0;
        int left = depthTravel(root-&amp;gt;left);
        int right = depthTravel(root-&amp;gt;right);
        diameter = max(left + right, diameter);
        return 1 + max(left, right);
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (106/106)

Runtime: 12 ms, faster than 88.39% of C++ submissions.

Memory Usage: 21 MB, less than 13.09% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
同樣的是一個樹遍歷的題目。不過第一次做的時候因爲想用一個函數解決問題，但是好像是不行的。因爲遞歸返回值如果是最長的直徑的話，就無法只用一個單一的返回值來構造這個函數，又不能修改參數。所以遞歸函數的返回值需要更多的信息，因此還是藉助了返回值爲結點高度的函數 &lt;code&gt;depthTravel&lt;/code&gt; 。&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode528-diameter-of-binary-tree/</guid><pubDate>Sun, 27 Sep 2020 20:21:11 GMT</pubDate></item><item><title>Leetcode491. Find Mode in Binary Search Tree</title><link>https://fpghwd.github.io/posts/leetcode491-find-mode-in-binary-search-tree/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/"&gt;501. Find Mode in Binary Search Tree&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
  public:
    vector&amp;lt;int&amp;gt; findMode(TreeNode *root) {
        if (root == NULL)
            return vector&amp;lt;int&amp;gt;{};
        vector&amp;lt;int&amp;gt; path, mode;
        travelMidOrder(root, path);
        int k, n = 0;
        for (int i = 0; i &amp;lt; path.size(); i = k) {
            k = i;
            while (k &amp;lt; path.size() &amp;amp;&amp;amp; path[k] == path[i])
                k++;
            if (k - i &amp;gt; n) {
                mode.clear();
                mode.push_back(path[i]);
                n = k - i;
            } else if (k - i == n)
                mode.push_back(path[i]);
        }

        return mode;
    }

    void travelMidOrder(TreeNode *root, vector&amp;lt;int&amp;gt; &amp;amp;path) {
        if (root == nullptr)
            return;
        if (root-&amp;gt;left)
            travelMidOrder(root-&amp;gt;left, path);
        path.push_back(root-&amp;gt;val);
        if (root-&amp;gt;right)
            travelMidOrder(root-&amp;gt;right, path);
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (25/25)

Runtime: 24 ms, faster than 94.02% of C++ submissions.

Memory Usage: 24.9 MB, less than 56.91% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><guid>https://fpghwd.github.io/posts/leetcode491-find-mode-in-binary-search-tree/</guid><pubDate>Sun, 27 Sep 2020 04:46:23 GMT</pubDate></item><item><title>Leetcode901. Sort Array By Parity</title><link>https://fpghwd.github.io/posts/leetcode901-sort-array-by-parity/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/sort-array-by-parity/"&gt;901. Sort Array By Parity&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    vector&amp;lt;int&amp;gt; sortArrayByParity(vector&amp;lt;int&amp;gt; &amp;amp;A) {
        sort(begin(A), end(A),
             [](auto &amp;amp;a, auto &amp;amp;b) { return a % 2 == 0 &amp;amp;&amp;amp; b % 2 == 1; });
        return A;
    }
};


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (285/285)

Runtime: 36 ms, faster than 19.11% of C++ submissions.

Memory Usage: 16.6 MB, less than 16.48% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
模仿 0947 reorder-data-in-log-files 题目的写法。
&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode901-sort-array-by-parity/</guid><pubDate>Sat, 26 Sep 2020 07:24:25 GMT</pubDate></item><item><title>Leetcode733. Flood Fill</title><link>https://fpghwd.github.io/posts/leetcode733-flood-fill/</link><dc:creator>suzumiya natsuhi</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://leetcode.com/problems/flood-fill/"&gt;733. Flood Fill&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Solution&lt;/b&gt;
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-C"&gt;
class Solution {
  public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;
    floodFill(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;image, int sr, int sc, int newColor) {
        int old_color = image[sr][sc];
        if (old_color == newColor)
            return image;

        floodFill(image, sr, sc, newColor, old_color);

        return image;
    }

    void floodFill(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;image,
                   int sr,
                   int sc,
                   int newColor,
                   int oldColor) {
        // paint
        image[sr][sc] = newColor;

        // paint others
        if (sr - 1 &amp;gt;= 0 &amp;amp;&amp;amp; oldColor == image[sr - 1][sc])
            floodFill(image, sr - 1, sc, newColor);
        if (sr + 1 &amp;lt; image.size() &amp;amp;&amp;amp; oldColor == image[sr + 1][sc])
            floodFill(image, sr + 1, sc, newColor);
        if (sc - 1 &amp;gt;= 0 &amp;amp;&amp;amp; oldColor == image[sr][sc - 1])
            floodFill(image, sr, sc - 1, newColor);
        if (sc + 1 &amp;lt; image[0].size() &amp;amp;&amp;amp; oldColor == image[sr][sc + 1])
            floodFill(image, sr, sc + 1, newColor);
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-html"&gt;
Status: Accepted (277/277)

Runtime: 12 ms, faster than 97.05% of C++ submissions.

Memory Usage: 14.9 MB, less than 5.01% of C++ submissions.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
第一次做的时候忽略了没有保存 &lt;code&gt;old_color&lt;/code&gt; ，后面有问题。&lt;/p&gt;&lt;/div&gt;</description><category>leetcode</category><guid>https://fpghwd.github.io/posts/leetcode733-flood-fill/</guid><pubDate>Fri, 25 Sep 2020 20:17:37 GMT</pubDate></item></channel></rss>